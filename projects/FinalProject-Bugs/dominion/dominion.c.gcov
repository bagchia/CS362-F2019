        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compare called 90 returned 100% blocks executed 83%
       90:    9:int compare(const void* a, const void* b) {
       90:   10:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:        return 1;
       90:   12:    if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       24:   13:        return -1;
       66:   14:    return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:    return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:                  int k8, int k9, int k10) {
    #####:   24:    int* k = malloc(10 * sizeof(int));
    #####:   25:    k[0] = k1;
    #####:   26:    k[1] = k2;
    #####:   27:    k[2] = k3;
    #####:   28:    k[3] = k4;
    #####:   29:    k[4] = k5;
    #####:   30:    k[5] = k6;
    #####:   31:    k[6] = k7;
    #####:   32:    k[7] = k8;
    #####:   33:    k[8] = k9;
    #####:   34:    k[9] = k10;
    #####:   35:    return k;
        -:   36:}
        -:   37:
function initializeGame called 7 returned 100% blocks executed 89%
        7:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:                   struct gameState *state) {
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:
        -:   44:    //set up random number generator
        7:   45:    SelectStream(1);
call    0 returned 100%
        7:   46:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:
        -:   48:    //check number of players
        7:   49:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
        -:   50:    {
        4:   51:        return -1;
        -:   52:    }
        -:   53:
        -:   54:    //set number of players
        3:   55:    state->numPlayers = numPlayers;
        -:   56:
        -:   57:    //check selected kingdom cards are different
       33:   58:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:    {
      330:   60:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:        {
      300:   62:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:            {
    #####:   64:                return -1;
        -:   65:            }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:    //initialize supply
        -:   71:    ///////////////////////////////
        -:   72:
        -:   73:    //set number of Curse cards
        3:   74:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   75:    {
        3:   76:        state->supplyCount[curse] = 10;
        -:   77:    }
    #####:   78:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   79:    {
    #####:   80:        state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:    else
        -:   83:    {
    #####:   84:        state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:    //set number of Victory cards
        3:   88:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   89:    {
        3:   90:        state->supplyCount[estate] = 8;
        3:   91:        state->supplyCount[duchy] = 8;
        3:   92:        state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:    else
        -:   95:    {
    #####:   96:        state->supplyCount[estate] = 12;
    #####:   97:        state->supplyCount[duchy] = 12;
    #####:   98:        state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:    //set number of Treasure cards
        3:  102:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  103:    state->supplyCount[silver] = 40;
        3:  104:    state->supplyCount[gold] = 30;
        -:  105:
        -:  106:    //set number of Kingdom cards
       63:  107:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:    {
      495:  109:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  110:        {
      465:  111:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:            {
        -:  113:                //check if card is a 'Victory' Kingdom card
       30:  114:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  115:                {
       12:  116:                    if (numPlayers == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  117:                        state->supplyCount[i] = 8;
        -:  118:                    }
        -:  119:                    else {
    #####:  120:                        state->supplyCount[i] = 12;
        -:  121:                    }
        -:  122:                }
        -:  123:                else
        -:  124:                {
       24:  125:                    state->supplyCount[i] = 10;
        -:  126:                }
       30:  127:                break;
        -:  128:            }
        -:  129:            else    //card is not in the set choosen for the game
        -:  130:            {
      435:  131:                state->supplyCount[i] = -1;
        -:  132:            }
        -:  133:        }
        -:  134:
        -:  135:    }
        -:  136:
        -:  137:    ////////////////////////
        -:  138:    //supply intilization complete
        -:  139:
        -:  140:    //set player decks
        9:  141:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  142:    {
        6:  143:        state->deckCount[i] = 0;
       24:  144:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  145:        {
       18:  146:            state->deck[i][j] = estate;
       18:  147:            state->deckCount[i]++;
        -:  148:        }
       48:  149:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  150:        {
       42:  151:            state->deck[i][j] = copper;
       42:  152:            state->deckCount[i]++;
        -:  153:        }
        -:  154:    }
        -:  155:
        -:  156:    //shuffle player decks
        9:  157:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  158:    {
        6:  159:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  160:        {
    #####:  161:            return -1;
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:    //draw player hands
        9:  166:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  167:    {
        -:  168:        //initialize hand size to zero
        6:  169:        state->handCount[i] = 0;
        6:  170:        state->discardCount[i] = 0;
        -:  171:        //draw 5 cards
        -:  172:        // for (j = 0; j < 5; j++)
        -:  173:        //	{
        -:  174:        //	  drawCard(i, state);
        -:  175:        //	}
        -:  176:    }
        -:  177:
        -:  178:    //set embargo tokens to 0 for all supply piles
       84:  179:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  180:    {
       81:  181:        state->embargoTokens[i] = 0;
        -:  182:    }
        -:  183:
        -:  184:    //initialize first player's turn
        3:  185:    state->outpostPlayed = 0;
        3:  186:    state->phase = 0;
        3:  187:    state->numActions = 1;
        3:  188:    state->numBuys = 1;
        3:  189:    state->playedCardCount = 0;
        3:  190:    state->whoseTurn = 0;
        3:  191:    state->handCount[state->whoseTurn] = 0;
        -:  192:    //int it; move to top
        -:  193:
        -:  194:    //Moved draw cards to here, only drawing at the start of a turn
       18:  195:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  196:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  197:    }
        -:  198:
        3:  199:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  200:
        3:  201:    return 0;
        -:  202:}
        -:  203:
function shuffle called 6 returned 100% blocks executed 94%
        6:  204:int shuffle(int player, struct gameState *state) {
        -:  205:
        -:  206:
        -:  207:    int newDeck[MAX_DECK];
        6:  208:    int newDeckPos = 0;
        -:  209:    int card;
        -:  210:    int i;
        -:  211:
        6:  212:    if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  213:        return -1;
        6:  214:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  215:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
       72:  217:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  218:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       60:  219:        newDeck[newDeckPos] = state->deck[player][card];
       60:  220:        newDeckPos++;
      243:  221:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      183:  222:            state->deck[player][i] = state->deck[player][i+1];
        -:  223:        }
       60:  224:        state->deckCount[player]--;
        -:  225:    }
       66:  226:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  227:        state->deck[player][i] = newDeck[i];
       60:  228:        state->deckCount[player]++;
        -:  229:    }
        -:  230:
        6:  231:    return 0;
        -:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
    #####:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  235:{
        -:  236:    int card;
    #####:  237:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:    //check if it is the right phase
    #####:  240:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:        return -1;
        -:  243:    }
        -:  244:
        -:  245:    //check if player has enough actions
    #####:  246:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:        return -1;
        -:  249:    }
        -:  250:
        -:  251:    //get card played
    #####:  252:    card = handCard(handPos, state);
call    0 never executed
        -:  253:
        -:  254:    //check if selected card is an action
    #####:  255:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:        return -1;
        -:  258:    }
        -:  259:
        -:  260:    //play card
    #####:  261:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:    {
    #####:  263:        return -1;
        -:  264:    }
        -:  265:
        -:  266:    //reduce number of actions
    #####:  267:    state->numActions--;
        -:  268:
        -:  269:    //update coins (Treasure cards may be added with card draws)
    #####:  270:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  271:
    #####:  272:    return 0;
        -:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:    int who;
        -:  277:    if (DEBUG) {
        -:  278:        printf("Entering buyCard...\n");
        -:  279:    }
        -:  280:
        -:  281:    // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:    who = state->whoseTurn;
        -:  284:
    #####:  285:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  286:        if (DEBUG)
        -:  287:            printf("You do not have any buys left\n");
    #####:  288:        return -1;
    #####:  289:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:        if (DEBUG)
        -:  291:            printf("There are not any of that type of card left\n");
    #####:  292:        return -1;
    #####:  293:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  294:        if (DEBUG)
        -:  295:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:        return -1;
        -:  297:    } else {
    #####:  298:        state->phase=1;
        -:  299:        //state->supplyCount[supplyPos]--;
    #####:  300:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  301:
    #####:  302:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  303:        state->numBuys--;
        -:  304:        if (DEBUG)
        -:  305:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:    }
        -:  307:
        -:  308:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:    //state->discardCount[who]++;
        -:  310:
    #####:  311:    return 0;
        -:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:    return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  320:    return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 10 returned 100% blocks executed 100%
       10:  323:int supplyCount(int card, struct gameState *state) {
       10:  324:    return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:    int i;
    #####:  329:    int count = 0;
        -:  330:
    #####:  331:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  334:    }
        -:  335:
    #####:  336:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  339:    }
        -:  340:
    #####:  341:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  344:    }
        -:  345:
    #####:  346:    return count;
        -:  347:}
        -:  348:
function whoseTurn called 14 returned 100% blocks executed 100%
       14:  349:int whoseTurn(struct gameState *state) {
       14:  350:    return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  353:int endTurn(struct gameState *state) {
        -:  354:    int k;
        -:  355:    int i;
    #####:  356:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  357:
        -:  358:    //Discard hand
    #####:  359:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  360:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:    }
    #####:  363:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:
        -:  365:    //Code for determining the player
    #####:  366:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  367:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:    }
        -:  369:    else {
    #####:  370:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:    }
        -:  372:
    #####:  373:    state->outpostPlayed = 0;
    #####:  374:    state->phase = 0;
    #####:  375:    state->numActions = 1;
    #####:  376:    state->coins = 0;
    #####:  377:    state->numBuys = 1;
    #####:  378:    state->playedCardCount = 0;
    #####:  379:    state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:    //int k; move to top
        -:  382:    //Next player draws hand
    #####:  383:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  384:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  385:    }
        -:  386:
        -:  387:    //Update money
    #####:  388:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  389:
    #####:  390:    return 0;
        -:  391:}
        -:  392:
function isGameOver called 2 returned 100% blocks executed 27%
        2:  393:int isGameOver(struct gameState *state) {
        -:  394:    int i;
        -:  395:    int j;
        -:  396:
        -:  397:    //if stack of Province cards is empty, the game ends
        2:  398:    if (state->supplyCount[province] == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  399:    {
        2:  400:        return 1;
        -:  401:    }
        -:  402:
        -:  403:    //if three supply pile are at 0, the game ends
    #####:  404:    j = 0;
    #####:  405:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  406:    {
    #####:  407:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:        {
    #####:  409:            j++;
        -:  410:        }
        -:  411:    }
    #####:  412:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:        return 1;
        -:  415:    }
        -:  416:
    #####:  417:    return 0;
        -:  418:}
        -:  419:
function scoreFor called 1 returned 100% blocks executed 64%
        1:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:    int i;
        1:  423:    int score = 0;
        -:  424:    //score from hand
        2:  425:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  426:    {
        1:  427:        if (state->hand[player][i] == curse) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  428:            score = score - 1;
        -:  429:        };
        1:  430:        if (state->hand[player][i] == estate) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  431:            score = score + 1;
        -:  432:        };
        1:  433:        if (state->hand[player][i] == duchy) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  434:            score = score + 3;
        -:  435:        };
        1:  436:        if (state->hand[player][i] == province) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  437:            score = score + 6;
        -:  438:        };
        1:  439:        if (state->hand[player][i] == great_hall) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  440:            score = score + 1;
        -:  441:        };
        1:  442:        if (state->hand[player][i] == gardens) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  443:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  444:        };
        -:  445:    }
        -:  446:
        -:  447:    //score from discard
        2:  448:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  449:    {
        1:  450:        if (state->discard[player][i] == curse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  451:            score = score - 1;
        -:  452:        };
        1:  453:        if (state->discard[player][i] == estate) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  454:            score = score + 1;
        -:  455:        };
        1:  456:        if (state->discard[player][i] == duchy) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  457:            score = score + 3;
        -:  458:        };
        1:  459:        if (state->discard[player][i] == province) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  460:            score = score + 6;
        -:  461:        };
        1:  462:        if (state->discard[player][i] == great_hall) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  463:            score = score + 1;
        -:  464:        };
        1:  465:        if (state->discard[player][i] == gardens) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  466:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  467:        };
        -:  468:    }
        -:  469:
        -:  470:    //score from deck
        2:  471:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  472:    {
        1:  473:        if (state->deck[player][i] == curse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  474:            score = score - 1;
        -:  475:        };
        1:  476:        if (state->deck[player][i] == estate) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  477:            score = score + 1;
        -:  478:        };
        1:  479:        if (state->deck[player][i] == duchy) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  480:            score = score + 3;
        -:  481:        };
        1:  482:        if (state->deck[player][i] == province) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  483:            score = score + 6;
        -:  484:        };
        1:  485:        if (state->deck[player][i] == great_hall) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  486:            score = score + 1;
        -:  487:        };
        1:  488:        if (state->deck[player][i] == gardens) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  489:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  490:        };
        -:  491:    }
        -:  492:
        1:  493:    return score;
        -:  494:}
        -:  495:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  496:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  497:    int i;
        -:  498:    int j;
        -:  499:    int highScore;
        -:  500:    int currentPlayer;
        -:  501:
        -:  502:    //get score for each player
    #####:  503:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:    {
        -:  505:        //set unused player scores to -9999
    #####:  506:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  507:        {
    #####:  508:            players[i] = -9999;
        -:  509:        }
        -:  510:        else
        -:  511:        {
    #####:  512:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  513:        }
        -:  514:    }
        -:  515:
        -:  516:    //find highest score
    #####:  517:    j = 0;
    #####:  518:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  519:    {
    #####:  520:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  521:        {
    #####:  522:            j = i;
        -:  523:        }
        -:  524:    }
    #####:  525:    highScore = players[j];
        -:  526:
        -:  527:    //add 1 to players who had less turns
    #####:  528:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  529:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  530:    {
    #####:  531:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  532:        {
    #####:  533:            players[i]++;
        -:  534:        }
        -:  535:    }
        -:  536:
        -:  537:    //find new highest score
    #####:  538:    j = 0;
    #####:  539:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  540:    {
    #####:  541:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  542:        {
    #####:  543:            j = i;
        -:  544:        }
        -:  545:    }
    #####:  546:    highScore = players[j];
        -:  547:
        -:  548:    //set winners in array to 1 and rest to 0
    #####:  549:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  550:    {
    #####:  551:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  552:        {
    #####:  553:            players[i] = 1;
        -:  554:        }
        -:  555:        else
        -:  556:        {
    #####:  557:            players[i] = 0;
        -:  558:        }
        -:  559:    }
        -:  560:
    #####:  561:    return 0;
        -:  562:}
        -:  563:
function drawCard called 15 returned 100% blocks executed 38%
       15:  564:int drawCard(int player, struct gameState *state)
        -:  565:{   int count;
        -:  566:    int deckCounter;
       15:  567:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  568:
        -:  569:        //Step 1 Shuffle the discard pile back into a deck
        -:  570:        int i;
        -:  571:        //Move discard to deck
    #####:  572:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  573:            state->deck[player][i] = state->discard[player][i];
    #####:  574:            state->discard[player][i] = -1;
        -:  575:        }
        -:  576:
    #####:  577:        state->deckCount[player] = state->discardCount[player];
    #####:  578:        state->discardCount[player] = 0;//Reset discard
        -:  579:
        -:  580:        //Shufffle the deck
    #####:  581:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  582:
        -:  583:        if (DEBUG) { //Debug statements
        -:  584:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  585:        }
        -:  586:
    #####:  587:        state->discardCount[player] = 0;
        -:  588:
        -:  589:        //Step 2 Draw Card
    #####:  590:        count = state->handCount[player];//Get current player's hand count
        -:  591:
        -:  592:        if (DEBUG) { //Debug statements
        -:  593:            printf("Current hand count: %d\n", count);
        -:  594:        }
        -:  595:
    #####:  596:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  597:
    #####:  598:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  599:            return -1;
        -:  600:
    #####:  601:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  602:        state->deckCount[player]--;
    #####:  603:        state->handCount[player]++;//Increment hand count
        -:  604:    }
        -:  605:
        -:  606:    else {
       15:  607:        int count = state->handCount[player];//Get current hand count for player
        -:  608:        int deckCounter;
        -:  609:        if (DEBUG) { //Debug statements
        -:  610:            printf("Current hand count: %d\n", count);
        -:  611:        }
        -:  612:
       15:  613:        deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  614:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  615:        state->deckCount[player]--;
       15:  616:        state->handCount[player]++;//Increment hand count
        -:  617:    }
        -:  618:
       15:  619:    return 0;
        -:  620:}
        -:  621:
function getCost called 25 returned 100% blocks executed 43%
       25:  622:int getCost(int cardNumber)
        -:  623:{
       25:  624:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 0%
branch  4 taken 16%
branch  5 taken 16%
branch  6 taken 36%
branch  7 taken 0%
branch  8 taken 4%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 4%
branch 14 taken 0%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  625:    {
        -:  626:    case curse:
    #####:  627:        return 0;
        -:  628:    case estate:
        1:  629:        return 2;
        -:  630:    case duchy:
        1:  631:        return 5;
        -:  632:    case province:
    #####:  633:        return 8;
        -:  634:    case copper:
        4:  635:        return 0;
        -:  636:    case silver:
        4:  637:        return 3;
        -:  638:    case gold:
        9:  639:        return 6;
        -:  640:    case adventurer:
    #####:  641:        return 6;
        -:  642:    case council_room:
        1:  643:        return 5;
        -:  644:    case feast:
    #####:  645:        return 4;
        -:  646:    case gardens:
    #####:  647:        return 4;
        -:  648:    case mine:
    #####:  649:        return 5;
        -:  650:    case remodel:
    #####:  651:        return 4;
        -:  652:    case smithy:
        1:  653:        return 4;
        -:  654:    case village:
    #####:  655:        return 3;
        -:  656:    case baron:
        1:  657:        return 4;
        -:  658:    case great_hall:
        1:  659:        return 3;
        -:  660:    case minion:
    #####:  661:        return 5;
        -:  662:    case steward:
    #####:  663:        return 3;
        -:  664:    case tribute:
    #####:  665:        return 5;
        -:  666:    case ambassador:
    #####:  667:        return 3;
        -:  668:    case cutpurse:
    #####:  669:        return 4;
        -:  670:    case embargo:
        1:  671:        return 2;
        -:  672:    case outpost:
        1:  673:        return 5;
        -:  674:    case salvager:
    #####:  675:        return 4;
        -:  676:    case sea_hag:
    #####:  677:        return 4;
        -:  678:    case treasure_map:
    #####:  679:        return 4;
        -:  680:    }
        -:  681:
    #####:  682:    return -1;
        -:  683:}
        -:  684:
function cardEffect called 14 returned 100% blocks executed 26%
       14:  685:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  686:{
        -:  687:    int i;
        -:  688:    int j;
        -:  689:    int k;
        -:  690:    int x;
        -:  691:    int index;
       14:  692:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
       14:  693:    int nextPlayer = currentPlayer + 1;
        -:  694:
       14:  695:    int tributeRevealedCards[2] = {-1, -1};
        -:  696:    int temphand[MAX_HAND];// moved above the if statement
       14:  697:    int drawntreasure=0;
        -:  698:    int cardDrawn;
       14:  699:    int z = 0;// this is the counter for the temp hand
       14:  700:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       12:  701:        nextPlayer = 0;
        -:  702:    }
        -:  703:
        -:  704:
        -:  705:    //uses switch to select card and perform actions
       14:  706:    switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 7%
branch  3 taken 0%
branch  4 taken 57%
branch  5 taken 29%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 7%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  707:    {
        -:  708:    case adventurer:
    #####:  709:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  710:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  711:                shuffle(currentPlayer, state);
call    0 never executed
        -:  712:            }
    #####:  713:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  714:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  715:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  716:                drawntreasure++;
        -:  717:            else {
    #####:  718:                temphand[z]=cardDrawn;
    #####:  719:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  720:                z++;
        -:  721:            }
        -:  722:        }
    #####:  723:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  724:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  725:            z=z-1;
        -:  726:        }
    #####:  727:        return 0;
        -:  728:
        -:  729:    case council_room:
        -:  730:        //+4 Cards
    #####:  731:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  732:        {
    #####:  733:            drawCard(currentPlayer, state);
call    0 never executed
        -:  734:        }
        -:  735:
        -:  736:        //+1 Buy
    #####:  737:        state->numBuys++;
        -:  738:
        -:  739:        //Each other player draws a card
    #####:  740:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  741:        {
    #####:  742:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  743:            {
    #####:  744:                drawCard(i, state);
call    0 never executed
        -:  745:            }
        -:  746:        }
        -:  747:
        -:  748:        //put played card in played card pile
    #####:  749:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  750:
    #####:  751:        return 0;
        -:  752:
        -:  753:    case feast:
        -:  754:        //gain card with cost up to 5
        -:  755:        //Backup hand
        3:  756:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  757:            temphand[i] = state->hand[currentPlayer][i];//Backup card
        2:  758:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  759:        }
        -:  760:        //Backup hand
        -:  761:
        -:  762:        //Update Coins for Buy
        1:  763:        updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        1:  764:        x = 1;//Condition to loop on
        3:  765:        while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  766:            if (supplyCount(choice1, state) <= 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  767:                if (DEBUG)
        -:  768:                    printf("None of that card left, sorry!\n");
        -:  769:
        -:  770:                if (DEBUG) {
        -:  771:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  772:                }
        -:  773:            }
        1:  774:            else if (state->coins < getCost(choice1)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  775:                printf("That card is too expensive!\n");
call    0 never executed
        -:  776:
        -:  777:                if (DEBUG) {
        -:  778:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  779:                }
        -:  780:            }
        -:  781:            else {
        -:  782:
        -:  783:                if (DEBUG) {
        -:  784:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  785:                }
        -:  786:
        1:  787:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        1:  788:                x = 0;//No more buying cards
        -:  789:
        -:  790:                if (DEBUG) {
        -:  791:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  792:                }
        -:  793:
        -:  794:            }
        -:  795:        }
        -:  796:
        -:  797:        //Reset Hand
        3:  798:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  799:            state->hand[currentPlayer][i] = temphand[i];
        2:  800:            temphand[i] = -1;
        -:  801:        }
        -:  802:        //Reset Hand
        -:  803:
        1:  804:        return 0;
        -:  805:
        -:  806:    case gardens:
    #####:  807:        return -1;
        -:  808:
        -:  809:    case mine:
        8:  810:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
        8:  812:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  813:        {
    #####:  814:            return -1;
        -:  815:        }
        -:  816:
        8:  817:        if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  818:        {
    #####:  819:            return -1;
        -:  820:        }
        -:  821:
        8:  822:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        -:  823:        {
        2:  824:            return -1;
        -:  825:        }
        -:  826:
        6:  827:        gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  828:
        -:  829:        //discard card from hand
        6:  830:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  831:
        -:  832:        //discard trashed card
        6:  833:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  834:        {
        6:  835:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  836:            {
        6:  837:                discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
        6:  838:                break;
        -:  839:            }
        -:  840:        }
        -:  841:
        6:  842:        return 0;
        -:  843:
        -:  844:    case remodel:
        4:  845:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  846:
        4:  847:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -:  848:        {
        2:  849:            return -1;
        -:  850:        }
        -:  851:
        2:  852:        gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  853:
        -:  854:        //discard card from hand
        2:  855:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  856:
        -:  857:        //discard trashed card
        2:  858:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  859:        {
        2:  860:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  861:            {
        2:  862:                discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
        2:  863:                break;
        -:  864:            }
        -:  865:        }
        -:  866:
        -:  867:
        2:  868:        return 0;
        -:  869:
        -:  870:    case smithy:
        -:  871:        //+3 Cards
    #####:  872:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  873:        {
    #####:  874:            drawCard(currentPlayer, state);
call    0 never executed
        -:  875:        }
        -:  876:
        -:  877:        //discard card from hand
    #####:  878:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  879:        return 0;
        -:  880:
        -:  881:    case village:
        -:  882:        //+1 Card
    #####:  883:        drawCard(currentPlayer, state);
call    0 never executed
        -:  884:
        -:  885:        //+2 Actions
    #####:  886:        state->numActions = state->numActions + 2;
        -:  887:
        -:  888:        //discard played card from hand
    #####:  889:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  890:        return 0;
        -:  891:
        -:  892:    case baron:
    #####:  893:        state->numBuys++;//Increase buys by 1!
    #####:  894:        if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  895:            int p = 0;//Iterator for hand!
    #####:  896:            int card_not_discarded = 1;//Flag for discard set!
    #####:  897:            while(card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  898:                if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  899:                    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  900:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  901:                    state->discardCount[currentPlayer]++;
    #####:  902:                    for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  903:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  904:                    }
    #####:  905:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  906:                    state->handCount[currentPlayer]--;
    #####:  907:                    card_not_discarded = 0;//Exit the loop
        -:  908:                }
    #####:  909:                else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  910:                    if(DEBUG) {
        -:  911:                        printf("No estate cards in your hand, invalid choice\n");
        -:  912:                        printf("Must gain an estate if there are any\n");
        -:  913:                    }
    #####:  914:                    if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  915:                        gainCard(estate, state, 0, currentPlayer);
call    0 never executed
        -:  916:
    #####:  917:                        state->supplyCount[estate]--;//Decrement estates
    #####:  918:                        if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:                            isGameOver(state);
call    0 never executed
        -:  920:                        }
        -:  921:                    }
    #####:  922:                    card_not_discarded = 0;//Exit the loop
        -:  923:                }
        -:  924:
        -:  925:                else {
    #####:  926:                    p++;//Next card
        -:  927:                }
        -:  928:            }
        -:  929:        }
        -:  930:
        -:  931:        else {
    #####:  932:            if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  933:                gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
        -:  934:
    #####:  935:                state->supplyCount[estate]--;//Decrement Estates
    #####:  936:                if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  937:                    isGameOver(state);
call    0 never executed
        -:  938:                }
        -:  939:            }
        -:  940:        }
        -:  941:
        -:  942:
    #####:  943:        return 0;
        -:  944:
        -:  945:    case great_hall:
        -:  946:        //+1 Card
    #####:  947:        drawCard(currentPlayer, state);
call    0 never executed
        -:  948:
        -:  949:        //+1 Actions
    #####:  950:        state->numActions++;
        -:  951:
        -:  952:        //discard card from hand
    #####:  953:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  954:        return 0;
        -:  955:
        -:  956:    case minion:
        -:  957:        //+1 action
    #####:  958:        state->numActions++;
        -:  959:
        -:  960:        //discard card from hand
    #####:  961:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  962:
    #####:  963:		if (choice1)
branch  0 never executed
branch  1 never executed
        -:  964:        {
    #####:  965:            state->coins = state->coins + 2;
        -:  966:        }
    #####:  967:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  968:        {
        -:  969:            //discard hand
    #####:  970:            while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  971:            {
    #####:  972:                discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  973:            }
        -:  974:
        -:  975:            //draw 4
    #####:  976:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  977:            {
    #####:  978:                drawCard(currentPlayer, state);
call    0 never executed
        -:  979:            }
        -:  980:
        -:  981:            //other players discard hand and redraw if hand size > 4
    #####:  982:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:            {
    #####:  984:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:                {
    #####:  986:                    if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  987:                    {
        -:  988:                        //discard hand
    #####:  989:                        while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  990:                        {
    #####:  991:                            discardCard(handPos, i, state, 0);
call    0 never executed
        -:  992:                        }
        -:  993:
        -:  994:                        //draw 4
    #####:  995:                        for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  996:                        {
    #####:  997:                            drawCard(i, state);
call    0 never executed
        -:  998:                        }
        -:  999:                    }
        -: 1000:                }
        -: 1001:            }
        -: 1002:
        -: 1003:        }
    #####: 1004:        return 0;
        -: 1005:
        -: 1006:    case steward:
    #####: 1007:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1008:        {
        -: 1009:            //+2 cards
    #####: 1010:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1011:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1012:        }
    #####: 1013:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1014:        {
        -: 1015:            //+2 coins
    #####: 1016:            state->coins = state->coins + 2;
        -: 1017:        }
        -: 1018:        else
        -: 1019:        {
        -: 1020:            //trash 2 cards in hand
    #####: 1021:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1022:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1023:        }
        -: 1024:
        -: 1025:        //discard card from hand
    #####: 1026:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1027:        return 0;
        -: 1028:
        -: 1029:    case tribute:
        1: 1030:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1031:            if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1032:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:                state->deckCount[nextPlayer]--;
        -: 1034:            }
    #####: 1035:            else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1036:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:                state->discardCount[nextPlayer]--;
        -: 1038:            }
        -: 1039:            else {
        -: 1040:                //No Card to Reveal
        -: 1041:                if (DEBUG) {
        -: 1042:                    printf("No cards to reveal\n");
        -: 1043:                }
        -: 1044:            }
        -: 1045:        }
        -: 1046:
        -: 1047:        else {
        1: 1048:            if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1049:                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1050:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:                    state->deckCount[nextPlayer]++;
    #####: 1052:                    state->discard[nextPlayer][i] = -1;
    #####: 1053:                    state->discardCount[nextPlayer]--;
        -: 1054:                }
        -: 1055:
    #####: 1056:                shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1057:            }
        1: 1058:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1: 1059:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1: 1060:            state->deckCount[nextPlayer]--;
        1: 1061:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1: 1062:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1: 1063:            state->deckCount[nextPlayer]--;
        -: 1064:        }
        -: 1065:
        1: 1066:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1067:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        1: 1068:            state->playedCardCount++;
        1: 1069:            tributeRevealedCards[1] = -1;
        -: 1070:        }
        -: 1071:
        4: 1072:        for (i = 0; i <= 2; i ++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1073:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        1: 1074:                state->coins += 2;
        -: 1075:            }
        -: 1076:
        2: 1077:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 1078:                drawCard(currentPlayer, state);
call    0 never executed
    #####: 1079:                drawCard(currentPlayer, state);
call    0 never executed
        -: 1080:            }
        -: 1081:            else { //Action Card
        2: 1082:                state->numActions = state->numActions + 2;
        -: 1083:            }
        -: 1084:        }
        -: 1085:
        1: 1086:        return 0;
        -: 1087:
        -: 1088:    case ambassador:
    #####: 1089:        j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:        if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1092:        {
    #####: 1093:            return -1;
        -: 1094:        }
        -: 1095:
    #####: 1096:        if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1097:        {
    #####: 1098:            return -1;
        -: 1099:        }
        -: 1100:
    #####: 1101:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:        {
    #####: 1103:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1104:            {
    #####: 1105:                j++;
        -: 1106:            }
        -: 1107:        }
    #####: 1108:        if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1109:        {
    #####: 1110:            return -1;
        -: 1111:        }
        -: 1112:
        -: 1113:        if (DEBUG)
        -: 1114:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:        //increase supply count for choosen card by amount being discarded
    #####: 1117:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:        //each other player gains a copy of revealed card
    #####: 1120:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:        {
    #####: 1122:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1123:            {
    #####: 1124:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1125:            }
        -: 1126:        }
        -: 1127:
        -: 1128:        //discard played card from hand
    #####: 1129:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1130:
        -: 1131:        //trash copies of cards returned to supply
    #####: 1132:        for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1133:        {
    #####: 1134:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1135:            {
    #####: 1136:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1137:                {
    #####: 1138:                    discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1139:                    break;
        -: 1140:                }
        -: 1141:            }
        -: 1142:        }
        -: 1143:
    #####: 1144:        return 0;
        -: 1145:
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1149:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1150:        {
    #####: 1151:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1152:            {
    #####: 1153:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1154:                {
    #####: 1155:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1156:                    {
    #####: 1157:                        discardCard(j, i, state, 0);
call    0 never executed
    #####: 1158:                        break;
        -: 1159:                    }
    #####: 1160:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1161:                    {
    #####: 1162:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1163:                        {
        -: 1164:                            if (DEBUG)
        -: 1165:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:                        }
    #####: 1167:                        break;
        -: 1168:                    }
        -: 1169:                }
        -: 1170:
        -: 1171:            }
        -: 1172:
        -: 1173:        }
        -: 1174:
        -: 1175:        //discard played card from hand
    #####: 1176:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1177:
    #####: 1178:        return 0;
        -: 1179:
        -: 1180:
        -: 1181:    case embargo:
        -: 1182:        //+2 Coins
    #####: 1183:        state->coins = state->coins + 2;
        -: 1184:
        -: 1185:        //see if selected pile is in play
    #####: 1186:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1187:        {
    #####: 1188:            return -1;
        -: 1189:        }
        -: 1190:
        -: 1191:        //add embargo token to selected supply pile
    #####: 1192:        state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:        //trash card
    #####: 1195:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1196:        return 0;
        -: 1197:
        -: 1198:    case outpost:
        -: 1199:        //set outpost flag
    #####: 1200:        state->outpostPlayed++;
        -: 1201:
        -: 1202:        //discard card
    #####: 1203:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1204:        return 0;
        -: 1205:
        -: 1206:    case salvager:
        -: 1207:        //+1 buy
    #####: 1208:        state->numBuys++;
        -: 1209:
    #####: 1210:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1211:        {
        -: 1212:            //gain coins equal to trashed card
    #####: 1213:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1214:            //trash card
    #####: 1215:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1216:        }
        -: 1217:
        -: 1218:        //discard card
    #####: 1219:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1220:        return 0;
        -: 1221:
        -: 1222:    case sea_hag:
    #####: 1223:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1224:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1225:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1226:                state->deckCount[i]--;
    #####: 1227:                state->discardCount[i]++;
    #####: 1228:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1229:            }
        -: 1230:        }
    #####: 1231:        return 0;
        -: 1232:
        -: 1233:    case treasure_map:
        -: 1234:        //search hand for another treasure_map
    #####: 1235:        index = -1;
    #####: 1236:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:        {
    #####: 1238:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1239:            {
    #####: 1240:                index = i;
    #####: 1241:                break;
        -: 1242:            }
        -: 1243:        }
    #####: 1244:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1245:        {
        -: 1246:            //trash both treasure cards
    #####: 1247:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1248:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1249:
        -: 1250:            //gain 4 Gold cards
    #####: 1251:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1252:            {
    #####: 1253:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1254:            }
        -: 1255:
        -: 1256:            //return success
    #####: 1257:            return 1;
        -: 1258:        }
        -: 1259:
        -: 1260:        //no second treasure_map found in hand
    #####: 1261:        return -1;
        -: 1262:    }
        -: 1263:
    #####: 1264:    return -1;
        -: 1265:}
        -: 1266:
function discardCard called 16 returned 100% blocks executed 89%
       16: 1267:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1268:{
        -: 1269:
        -: 1270:    //if card is not trashed, added to Played pile
       16: 1271:    if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1272:    {
        -: 1273:        //add card to played pile
       16: 1274:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       16: 1275:        state->playedCardCount++;
        -: 1276:    }
        -: 1277:
        -: 1278:    //set played card to -1
       16: 1279:    state->hand[currentPlayer][handPos] = -1;
        -: 1280:
        -: 1281:    //remove card from player's hand
       16: 1282:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1283:    {
        -: 1284:        //reduce number of cards in hand
        8: 1285:        state->handCount[currentPlayer]--;
        -: 1286:    }
        8: 1287:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1288:    {
        -: 1289:        //reduce number of cards in hand
    #####: 1290:        state->handCount[currentPlayer]--;
        -: 1291:    }
        -: 1292:    else
        -: 1293:    {
        -: 1294:        //replace discarded card with last card in hand
        8: 1295:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1296:        //set last card to -1
        8: 1297:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1298:        //reduce number of cards in hand
        8: 1299:        state->handCount[currentPlayer]--;
        -: 1300:    }
        -: 1301:
       16: 1302:    return 0;
        -: 1303:}
        -: 1304:
function gainCard called 9 returned 100% blocks executed 80%
        9: 1305:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1306:{
        -: 1307:    //Note: supplyPos is enum of choosen card
        -: 1308:
        -: 1309:    //check if supply pile is empty (0) or card is not used in game (-1)
        9: 1310:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
        -: 1311:    {
        8: 1312:        return -1;
        -: 1313:    }
        -: 1314:
        -: 1315:    //added card for [whoseTurn] current player:
        -: 1316:    // toFlag = 0 : add to discard
        -: 1317:    // toFlag = 1 : add to deck
        -: 1318:    // toFlag = 2 : add to hand
        -: 1319:
        1: 1320:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1321:    {
    #####: 1322:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1323:        state->deckCount[player]++;
        -: 1324:    }
        1: 1325:    else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1326:    {
    #####: 1327:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1328:        state->handCount[player]++;
        -: 1329:    }
        -: 1330:    else
        -: 1331:    {
        1: 1332:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1333:        state->discardCount[player]++;
        -: 1334:    }
        -: 1335:
        -: 1336:    //decrease number in supply pile
        1: 1337:    state->supplyCount[supplyPos]--;
        -: 1338:
        1: 1339:    return 0;
        -: 1340:}
        -: 1341:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1342:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1343:{
        -: 1344:    int i;
        -: 1345:
        -: 1346:    //reset coin count
        4: 1347:    state->coins = 0;
        -: 1348:
        -: 1349:    //add coins for each Treasure card in player's hand
       20: 1350:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1351:    {
       16: 1352:        if (state->hand[player][i] == copper)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1353:        {
       12: 1354:            state->coins += 1;
        -: 1355:        }
        4: 1356:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1357:        {
    #####: 1358:            state->coins += 2;
        -: 1359:        }
        4: 1360:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1361:        {
    #####: 1362:            state->coins += 3;
        -: 1363:        }
        -: 1364:    }
        -: 1365:
        -: 1366:    //add bonus
        4: 1367:    state->coins += bonus;
        -: 1368:
        4: 1369:    return 0;
        -: 1370:}
        -: 1371:
        -: 1372:
        -: 1373://end of dominion.c
        -: 1374:
