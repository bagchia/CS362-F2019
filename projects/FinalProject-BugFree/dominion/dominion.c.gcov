        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "interface.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
function compare called 300 returned 100% blocks executed 83%
      300:   10:int compare(const void* a, const void* b) {
      300:   11:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   12:        return 1;
      300:   13:    if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       80:   14:        return -1;
      220:   15:    return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:    return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10) {
    #####:   25:    int* k = malloc(10 * sizeof(int));
    #####:   26:    k[0] = k1;
    #####:   27:    k[1] = k2;
    #####:   28:    k[2] = k3;
    #####:   29:    k[3] = k4;
    #####:   30:    k[4] = k5;
    #####:   31:    k[5] = k6;
    #####:   32:    k[6] = k7;
    #####:   33:    k[7] = k8;
    #####:   34:    k[8] = k9;
    #####:   35:    k[9] = k10;
    #####:   36:    return k;
        -:   37:}
        -:   38:
function initializeGame called 10 returned 100% blocks executed 88%
       10:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:                   struct gameState *state) {
        -:   41:    int i;
        -:   42:    int j;
        -:   43:    int it;
        -:   44:
        -:   45:    //set up random number generator
       10:   46:    SelectStream(1);
call    0 returned 100%
       10:   47:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   48:
        -:   49:    //check number of players
       10:   50:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   51:    {
    #####:   52:        return -1;
        -:   53:    }
        -:   54:
        -:   55:    //set number of players
       10:   56:    state->numPlayers = numPlayers;
        -:   57:
        -:   58:    //check selected kingdom cards are different
      110:   59:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:    {
     1100:   61:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:        {
     1000:   63:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   64:            {
    #####:   65:                return -1;
        -:   66:            }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:    //initialize supply
        -:   72:    ///////////////////////////////
        -:   73:
        -:   74:    //set number of Curse cards
       10:   75:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   76:    {
       10:   77:        state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:        state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:    else
        -:   84:    {
    #####:   85:        state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:    //set number of Victory cards
       10:   89:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   90:    {
       10:   91:        state->supplyCount[estate] = 8;
       10:   92:        state->supplyCount[duchy] = 8;
       10:   93:        state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:    else
        -:   96:    {
    #####:   97:        state->supplyCount[estate] = 12;
    #####:   98:        state->supplyCount[duchy] = 12;
    #####:   99:        state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:    //set number of Treasure cards
       10:  103:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  104:    state->supplyCount[silver] = 40;
       10:  105:    state->supplyCount[gold] = 30;
        -:  106:
        -:  107:    //set number of Kingdom cards
      210:  108:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  109:    {
     1650:  110:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  111:        {
     1550:  112:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  113:            {
        -:  114:                //check if card is a 'Victory' Kingdom card
      100:  115:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  116:                {
       32:  117:                    if (numPlayers == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16:  118:                        state->supplyCount[i] = 8;
        -:  119:                    }
        -:  120:                    else {
    #####:  121:                        state->supplyCount[i] = 12;
        -:  122:                    }
        -:  123:                }
        -:  124:                else
        -:  125:                {
       84:  126:                    state->supplyCount[i] = 10;
        -:  127:                }
      100:  128:                break;
        -:  129:            }
        -:  130:            else    //card is not in the set choosen for the game
        -:  131:            {
     1450:  132:                state->supplyCount[i] = -1;
        -:  133:            }
        -:  134:        }
        -:  135:
        -:  136:    }
        -:  137:
        -:  138:    ////////////////////////
        -:  139:    //supply intilization complete
        -:  140:
        -:  141:    //set player decks
       30:  142:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  143:    {
       20:  144:        state->deckCount[i] = 0;
       80:  145:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  146:        {
       60:  147:            state->deck[i][j] = estate;
       60:  148:            state->deckCount[i]++;
        -:  149:        }
      160:  150:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  151:        {
      140:  152:            state->deck[i][j] = copper;
      140:  153:            state->deckCount[i]++;
        -:  154:        }
        -:  155:    }
        -:  156:
        -:  157:    //shuffle player decks
       30:  158:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  159:    {
       20:  160:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  161:        {
    #####:  162:            return -1;
        -:  163:        }
        -:  164:    }
        -:  165:
        -:  166:    //draw player hands
       30:  167:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  168:    {
        -:  169:        //initialize hand size to zero
       20:  170:        state->handCount[i] = 0;
       20:  171:        state->discardCount[i] = 0;
        -:  172:        //draw 5 cards
        -:  173:        // for (j = 0; j < 5; j++)
        -:  174:        //	{
        -:  175:        //	  drawCard(i, state);
        -:  176:        //	}
        -:  177:    }
        -:  178:
        -:  179:    //set embargo tokens to 0 for all supply piles
      280:  180:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  181:    {
      270:  182:        state->embargoTokens[i] = 0;
        -:  183:    }
        -:  184:
        -:  185:    //initialize first player's turn
       10:  186:    state->outpostPlayed = 0;
       10:  187:    state->phase = 0;
       10:  188:    state->numActions = 1;
       10:  189:    state->numBuys = 1;
       10:  190:    state->playedCardCount = 0;
       10:  191:    state->whoseTurn = 0;
       10:  192:    state->handCount[state->whoseTurn] = 0;
        -:  193:    //int it; move to top
        -:  194:
        -:  195:    //Moved draw cards to here, only drawing at the start of a turn
       60:  196:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       50:  197:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  198:    }
        -:  199:
       10:  200:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  201:
       10:  202:    return 0;
        -:  203:}
        -:  204:
function shuffle called 20 returned 100% blocks executed 94%
       20:  205:int shuffle(int player, struct gameState *state) {
        -:  206:
        -:  207:
        -:  208:    int newDeck[MAX_DECK];
       20:  209:    int newDeckPos = 0;
        -:  210:    int card;
        -:  211:    int i;
        -:  212:
       20:  213:    if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  214:        return -1;
       20:  215:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  216:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  217:
      240:  218:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      200:  219:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      200:  220:        newDeck[newDeckPos] = state->deck[player][card];
      200:  221:        newDeckPos++;
      684:  222:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      484:  223:            state->deck[player][i] = state->deck[player][i+1];
        -:  224:        }
      200:  225:        state->deckCount[player]--;
        -:  226:    }
      220:  227:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      200:  228:        state->deck[player][i] = newDeck[i];
      200:  229:        state->deckCount[player]++;
        -:  230:    }
        -:  231:
       20:  232:    return 0;
        -:  233:}
        -:  234:
function playCard called 0 returned 0% blocks executed 0%
    #####:  235:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  236:{
        -:  237:    int card;
    #####:  238:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  239:
        -:  240:    //check if it is the right phase
    #####:  241:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  242:    {
    #####:  243:        return -1;
        -:  244:    }
        -:  245:
        -:  246:    //check if player has enough actions
    #####:  247:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  248:    {
    #####:  249:        return -1;
        -:  250:    }
        -:  251:
        -:  252:    //get card played
    #####:  253:    card = handCard(handPos, state);
call    0 never executed
        -:  254:
        -:  255:    //check if selected card is an action
    #####:  256:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  257:    {
    #####:  258:        return -1;
        -:  259:    }
        -:  260:
        -:  261:    //play card
    #####:  262:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  263:    {
    #####:  264:        return -1;
        -:  265:    }
        -:  266:
        -:  267:    //reduce number of actions
    #####:  268:    state->numActions--;
        -:  269:
        -:  270:    //update coins (Treasure cards may be added with card draws)
    #####:  271:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  272:
    #####:  273:    return 0;
        -:  274:}
        -:  275:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:    int who;
        -:  278:    if (DEBUG) {
        -:  279:        printf("Entering buyCard...\n");
        -:  280:    }
        -:  281:
        -:  282:    // I don't know what to do about the phase thing.
        -:  283:
    #####:  284:    who = state->whoseTurn;
        -:  285:
    #####:  286:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  287:        if (DEBUG)
        -:  288:            printf("You do not have any buys left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:        if (DEBUG)
        -:  292:            printf("There are not any of that type of card left\n");
    #####:  293:        return -1;
    #####:  294:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  295:        if (DEBUG)
        -:  296:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:        return -1;
        -:  298:    } else {
    #####:  299:        state->phase=1;
        -:  300:        //state->supplyCount[supplyPos]--;
    #####:  301:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  302:
    #####:  303:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  304:        state->numBuys--;
        -:  305:        if (DEBUG)
        -:  306:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:    }
        -:  308:
        -:  309:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:    //state->discardCount[who]++;
        -:  311:
    #####:  312:    return 0;
        -:  313:}
        -:  314:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  315:int numHandCards(struct gameState *state) {
    #####:  316:    return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  317:}
        -:  318:
function handCard called 0 returned 0% blocks executed 0%
    #####:  319:int handCard(int handPos, struct gameState *state) {
    #####:  320:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  321:    return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
function supplyCount called 14 returned 100% blocks executed 100%
       14:  324:int supplyCount(int card, struct gameState *state) {
       14:  325:    return state->supplyCount[card];
        -:  326:}
        -:  327:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:    int i;
    #####:  330:    int count = 0;
        -:  331:
    #####:  332:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  335:    }
        -:  336:
    #####:  337:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:    }
        -:  341:
    #####:  342:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  343:    {
    #####:  344:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  345:    }
        -:  346:
    #####:  347:    return count;
        -:  348:}
        -:  349:
function whoseTurn called 17 returned 100% blocks executed 100%
       17:  350:int whoseTurn(struct gameState *state) {
       17:  351:    return state->whoseTurn;
        -:  352:}
        -:  353:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  354:int endTurn(struct gameState *state) {
        -:  355:    int k;
        -:  356:    int i;
    #####:  357:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  358:
        -:  359:    //Discard hand
    #####:  360:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  361:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  362:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:    }
    #####:  364:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:
        -:  366:    //Code for determining the player
    #####:  367:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  368:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:    }
        -:  370:    else {
    #####:  371:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:    }
        -:  373:
    #####:  374:    state->outpostPlayed = 0;
    #####:  375:    state->phase = 0;
    #####:  376:    state->numActions = 1;
    #####:  377:    state->coins = 0;
    #####:  378:    state->numBuys = 1;
    #####:  379:    state->playedCardCount = 0;
    #####:  380:    state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:    //int k; move to top
        -:  383:    //Next player draws hand
    #####:  384:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  385:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  386:    }
        -:  387:
        -:  388:    //Update money
    #####:  389:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  390:
    #####:  391:    return 0;
        -:  392:}
        -:  393:
function isGameOver called 2 returned 100% blocks executed 82%
        2:  394:int isGameOver(struct gameState *state) {
        -:  395:    int i;
        -:  396:    int j;
        -:  397:
        -:  398:    //if stack of Province cards is empty, the game ends
        2:  399:    if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  400:    {
    #####:  401:        return 1;
        -:  402:    }
        -:  403:
        -:  404:    //if three supply pile are at 0, the game ends
        2:  405:    j = 0;
       56:  406:    for (i = 0; i < 27; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  407:    {
       54:  408:        if (state->supplyCount[i] == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  409:        {
        6:  410:            j++;
        -:  411:        }
        -:  412:    }
        2:  413:    if ( j >= 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  414:    {
        2:  415:        return 1;
        -:  416:    }
        -:  417:
    #####:  418:    return 0;
        -:  419:}
        -:  420:
function scoreFor called 1 returned 100% blocks executed 64%
        1:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:    int i;
        1:  424:    int score = 0;
        -:  425:    //score from hand
        2:  426:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  427:    {
        1:  428:        if (state->hand[player][i] == curse) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  429:            score = score - 1;
        -:  430:        };
        1:  431:        if (state->hand[player][i] == estate) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  432:            score = score + 1;
        -:  433:        };
        1:  434:        if (state->hand[player][i] == duchy) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  435:            score = score + 3;
        -:  436:        };
        1:  437:        if (state->hand[player][i] == province) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  438:            score = score + 6;
        -:  439:        };
        1:  440:        if (state->hand[player][i] == great_hall) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  441:            score = score + 1;
        -:  442:        };
        1:  443:        if (state->hand[player][i] == gardens) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  444:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  445:        };
        -:  446:    }
        -:  447:
        -:  448:    //score from discard
        2:  449:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  450:    {
        1:  451:        if (state->discard[player][i] == curse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  452:            score = score - 1;
        -:  453:        };
        1:  454:        if (state->discard[player][i] == estate) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  455:            score = score + 1;
        -:  456:        };
        1:  457:        if (state->discard[player][i] == duchy) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  458:            score = score + 3;
        -:  459:        };
        1:  460:        if (state->discard[player][i] == province) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  461:            score = score + 6;
        -:  462:        };
        1:  463:        if (state->discard[player][i] == great_hall) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  464:            score = score + 1;
        -:  465:        };
        1:  466:        if (state->discard[player][i] == gardens) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  467:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  468:        };
        -:  469:    }
        -:  470:
        -:  471:    //score from deck
        4:  472:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  473:    {
        3:  474:        if (state->deck[player][i] == curse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  475:            score = score - 1;
        -:  476:        };
        3:  477:        if (state->deck[player][i] == estate) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  478:            score = score + 1;
        -:  479:        };
        3:  480:        if (state->deck[player][i] == duchy) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  481:            score = score + 3;
        -:  482:        };
        3:  483:        if (state->deck[player][i] == province) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  484:            score = score + 6;
        -:  485:        };
        3:  486:        if (state->deck[player][i] == great_hall) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  487:            score = score + 1;
        -:  488:        };
        3:  489:        if (state->deck[player][i] == gardens) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  490:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  491:        };
        -:  492:    }
        -:  493:
        1:  494:    return score;
        -:  495:}
        -:  496:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  497:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  498:    int i;
        -:  499:    int j;
        -:  500:    int highScore;
        -:  501:    int currentPlayer;
        -:  502:
        -:  503:    //get score for each player
    #####:  504:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  505:    {
        -:  506:        //set unused player scores to -9999
    #####:  507:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  508:        {
    #####:  509:            players[i] = -9999;
        -:  510:        }
        -:  511:        else
        -:  512:        {
    #####:  513:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  514:        }
        -:  515:    }
        -:  516:
        -:  517:    //find highest score
    #####:  518:    j = 0;
    #####:  519:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  520:    {
    #####:  521:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  522:        {
    #####:  523:            j = i;
        -:  524:        }
        -:  525:    }
    #####:  526:    highScore = players[j];
        -:  527:
        -:  528:    //add 1 to players who had less turns
    #####:  529:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  530:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  531:    {
    #####:  532:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  533:        {
    #####:  534:            players[i]++;
        -:  535:        }
        -:  536:    }
        -:  537:
        -:  538:    //find new highest score
    #####:  539:    j = 0;
    #####:  540:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  541:    {
    #####:  542:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  543:        {
    #####:  544:            j = i;
        -:  545:        }
        -:  546:    }
    #####:  547:    highScore = players[j];
        -:  548:
        -:  549:    //set winners in array to 1 and rest to 0
    #####:  550:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  551:    {
    #####:  552:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  553:        {
    #####:  554:            players[i] = 1;
        -:  555:        }
        -:  556:        else
        -:  557:        {
    #####:  558:            players[i] = 0;
        -:  559:        }
        -:  560:    }
        -:  561:
    #####:  562:    return 0;
        -:  563:}
        -:  564:
function drawCard called 50 returned 100% blocks executed 38%
       50:  565:int drawCard(int player, struct gameState *state)
        -:  566:{   int count;
        -:  567:    int deckCounter;
       50:  568:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  569:
        -:  570:        //Step 1 Shuffle the discard pile back into a deck
        -:  571:        int i;
        -:  572:        //Move discard to deck
    #####:  573:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  574:            state->deck[player][i] = state->discard[player][i];
    #####:  575:            state->discard[player][i] = -1;
        -:  576:        }
        -:  577:
    #####:  578:        state->deckCount[player] = state->discardCount[player];
    #####:  579:        state->discardCount[player] = 0;//Reset discard
        -:  580:
        -:  581:        //Shufffle the deck
    #####:  582:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  583:
        -:  584:        if (DEBUG) { //Debug statements
        -:  585:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  586:        }
        -:  587:
    #####:  588:        state->discardCount[player] = 0;
        -:  589:
        -:  590:        //Step 2 Draw Card
    #####:  591:        count = state->handCount[player];//Get current player's hand count
        -:  592:
        -:  593:        if (DEBUG) { //Debug statements
        -:  594:            printf("Current hand count: %d\n", count);
        -:  595:        }
        -:  596:
    #####:  597:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  598:
    #####:  599:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  600:            return -1;
        -:  601:
    #####:  602:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  603:        state->deckCount[player]--;
    #####:  604:        state->handCount[player]++;//Increment hand count
        -:  605:    }
        -:  606:
        -:  607:    else {
       50:  608:        int count = state->handCount[player];//Get current hand count for player
        -:  609:        int deckCounter;
        -:  610:        if (DEBUG) { //Debug statements
        -:  611:            printf("Current hand count: %d\n", count);
        -:  612:        }
        -:  613:
       50:  614:        deckCounter = state->deckCount[player];//Create holder for the deck count
       50:  615:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       50:  616:        state->deckCount[player]--;
       50:  617:        state->handCount[player]++;//Increment hand count
        -:  618:    }
        -:  619:
       50:  620:    return 0;
        -:  621:}
        -:  622:
function getCost called 25 returned 100% blocks executed 43%
       25:  623:int getCost(int cardNumber)
        -:  624:{
       25:  625:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 0%
branch  4 taken 16%
branch  5 taken 16%
branch  6 taken 36%
branch  7 taken 0%
branch  8 taken 4%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 4%
branch 14 taken 0%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  626:    {
        -:  627:    case curse:
    #####:  628:        return 0;
        -:  629:    case estate:
        1:  630:        return 2;
        -:  631:    case duchy:
        1:  632:        return 5;
        -:  633:    case province:
    #####:  634:        return 8;
        -:  635:    case copper:
        4:  636:        return 0;
        -:  637:    case silver:
        4:  638:        return 3;
        -:  639:    case gold:
        9:  640:        return 6;
        -:  641:    case adventurer:
    #####:  642:        return 6;
        -:  643:    case council_room:
        1:  644:        return 5;
        -:  645:    case feast:
    #####:  646:        return 4;
        -:  647:    case gardens:
    #####:  648:        return 4;
        -:  649:    case mine:
    #####:  650:        return 5;
        -:  651:    case remodel:
    #####:  652:        return 4;
        -:  653:    case smithy:
        1:  654:        return 4;
        -:  655:    case village:
    #####:  656:        return 3;
        -:  657:    case baron:
        1:  658:        return 4;
        -:  659:    case great_hall:
        1:  660:        return 3;
        -:  661:    case minion:
    #####:  662:        return 5;
        -:  663:    case steward:
    #####:  664:        return 3;
        -:  665:    case tribute:
    #####:  666:        return 5;
        -:  667:    case ambassador:
    #####:  668:        return 3;
        -:  669:    case cutpurse:
    #####:  670:        return 4;
        -:  671:    case embargo:
        1:  672:        return 2;
        -:  673:    case outpost:
        1:  674:        return 5;
        -:  675:    case salvager:
    #####:  676:        return 4;
        -:  677:    case sea_hag:
    #####:  678:        return 4;
        -:  679:    case treasure_map:
    #####:  680:        return 4;
        -:  681:    }
        -:  682:
    #####:  683:    return -1;
        -:  684:}
        -:  685:
function cardEffect called 17 returned 100% blocks executed 37%
       17:  686:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  687:{
        -:  688:    int i;
        -:  689:    int j;
        -:  690:    int k;
        -:  691:    int x;
        -:  692:    int index;
       17:  693:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
       17:  694:    int nextPlayer = currentPlayer + 1;
        -:  695:
       17:  696:    int tributeRevealedCards[2] = {-1, -1};
        -:  697:    int temphand[MAX_HAND];// moved above the if statement
       17:  698:    int drawntreasure=0;
        -:  699:    int cardDrawn;
       17:  700:    int z = 0;// this is the counter for the temp hand
       17:  701:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  702:        nextPlayer = 0;
        -:  703:    }
        -:  704:
        -:  705:
        -:  706:    //uses switch to select card and perform actions
       17:  707:    switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 6%
branch  3 taken 0%
branch  4 taken 47%
branch  5 taken 24%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 6%
branch 11 taken 0%
branch 12 taken 12%
branch 13 taken 6%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  708:    {
        -:  709:    case adventurer:
    #####:  710:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  711:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  712:                shuffle(currentPlayer, state);
call    0 never executed
        -:  713:            }
    #####:  714:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  715:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  716:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  717:                drawntreasure++;
        -:  718:            else {
    #####:  719:                temphand[z]=cardDrawn;
    #####:  720:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  721:                z++;
        -:  722:            }
        -:  723:        }
    #####:  724:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  725:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  726:            z=z-1;
        -:  727:        }
    #####:  728:        return 0;
        -:  729:
        -:  730:    case council_room:
        -:  731:        //+4 Cards
    #####:  732:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  733:        {
    #####:  734:            drawCard(currentPlayer, state);
call    0 never executed
        -:  735:        }
        -:  736:
        -:  737:        //+1 Buy
    #####:  738:        state->numBuys++;
        -:  739:
        -:  740:        //Each other player draws a card
    #####:  741:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  742:        {
    #####:  743:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  744:            {
    #####:  745:                drawCard(i, state);
call    0 never executed
        -:  746:            }
        -:  747:        }
        -:  748:
        -:  749:        //put played card in played card pile
    #####:  750:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  751:
    #####:  752:        return 0;
        -:  753:
        -:  754:    case feast:
        -:  755:        //gain card with cost up to 5
        -:  756:        //Backup hand
        3:  757:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  758:            temphand[i] = state->hand[currentPlayer][i];//Backup card
        2:  759:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  760:        }
        -:  761:        //Backup hand
        -:  762:
        -:  763:        //Update Coins for Buy
        -:  764:        //updateCoins(currentPlayer, state, 5);
        1:  765:        x = 1;//Condition to loop on
        3:  766:        while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  767:            if (supplyCount(choice1, state) <= 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  768:                if (DEBUG)
        -:  769:                    printf("None of that card left, sorry!\n");
        -:  770:
        -:  771:                if (DEBUG) {
        -:  772:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  773:                }
        -:  774:            }
        1:  775:            else if ( getCost(choice1) > 5) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  776:                printf("That card is too expensive!\n");
call    0 never executed
        -:  777:
        -:  778:                if (DEBUG) {
        -:  779:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  780:                }
        -:  781:            }
        -:  782:            else {
        -:  783:
        1:  784:                discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  785:
        -:  786:                if (DEBUG) {
        -:  787:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  788:                }
        -:  789:
        1:  790:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        1:  791:                x = 0;//No more buying cards
        -:  792:
        -:  793:                if (DEBUG) {
        -:  794:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  795:                }
        -:  796:
        -:  797:            }
        -:  798:        }
        -:  799:
        -:  800:        //Reset Hand
        2:  801:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  802:            state->hand[currentPlayer][i] = temphand[i];
        1:  803:            temphand[i] = -1;
        -:  804:        }
        -:  805:        //Reset Hand
        -:  806:
        1:  807:        return 0;
        -:  808:
        -:  809:    case gardens:
    #####:  810:        return -1;
        -:  811:
        -:  812:    case mine:
        8:  813:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  814:
        8:  815:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  816:        {
    #####:  817:            return -1;
        -:  818:        }
        -:  819:
        8:  820:        if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  821:        {
    #####:  822:            return -1;
        -:  823:        }
        -:  824:
        8:  825:        if ( getCost(state->hand[currentPlayer][choice1]) > getCost(choice2)  + 3 )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  826:        {
    #####:  827:            return -1;
        -:  828:        }
        -:  829:
        8:  830:        gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  831:
        -:  832:        //discard card from hand
        8:  833:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  834:
        -:  835:        //discard trashed card
       14:  836:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  837:        {
       14:  838:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
        -:  839:            {
        8:  840:                discardCard(i, currentPlayer, state, 1);
call    0 returned 100%
        8:  841:                break;
        -:  842:            }
        -:  843:        }
        -:  844:
        8:  845:        return 0;
        -:  846:
        -:  847:    case remodel:
        4:  848:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
        4:  850:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        -:  851:        {
        1:  852:            return -1;
        -:  853:        }
        -:  854:
        3:  855:        gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  856:
        -:  857:        //discard card from hand
        3:  858:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  859:
        -:  860:        //discard trashed card
        3:  861:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  862:        {
        3:  863:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  864:            {
        3:  865:                discardCard(i, currentPlayer, state, 1);
call    0 returned 100%
        3:  866:                break;
        -:  867:            }
        -:  868:        }
        -:  869:
        -:  870:
        3:  871:        return 0;
        -:  872:
        -:  873:    case smithy:
        -:  874:        //+3 Cards
    #####:  875:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  876:        {
    #####:  877:            drawCard(currentPlayer, state);
call    0 never executed
        -:  878:        }
        -:  879:
        -:  880:        //discard card from hand
    #####:  881:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  882:        return 0;
        -:  883:
        -:  884:    case village:
        -:  885:        //+1 Card
    #####:  886:        drawCard(currentPlayer, state);
call    0 never executed
        -:  887:
        -:  888:        //+2 Actions
    #####:  889:        state->numActions = state->numActions + 2;
        -:  890:
        -:  891:        //discard played card from hand
    #####:  892:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  893:        return 0;
        -:  894:
        -:  895:    case baron:
    #####:  896:        state->numBuys++;//Increase buys by 1!
    #####:  897:        if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  898:            int p = 0;//Iterator for hand!
    #####:  899:            int card_not_discarded = 1;//Flag for discard set!
    #####:  900:            while(card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  901:                if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  902:                    *bonus += 4;//Add 4 coins to the amount of coins
    #####:  903:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  904:                    state->discardCount[currentPlayer]++;
    #####:  905:                    for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  906:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  907:                    }
    #####:  908:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  909:                    state->handCount[currentPlayer]--;
    #####:  910:                    card_not_discarded = 0;//Exit the loop
        -:  911:                }
    #####:  912:                else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  913:                    if(DEBUG) {
        -:  914:                        printf("No estate cards in your hand, invalid choice\n");
        -:  915:                        printf("Must gain an estate if there are any\n");
        -:  916:                    }
    #####:  917:                    if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  918:                        gainCard(estate, state, 0, currentPlayer);
call    0 never executed
        -:  919:
    #####:  920:                        state->supplyCount[estate]--;//Decrement estates
    #####:  921:                        if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:                            isGameOver(state);
call    0 never executed
        -:  923:                        }
        -:  924:                    }
    #####:  925:                    card_not_discarded = 0;//Exit the loop
        -:  926:                }
        -:  927:
        -:  928:                else {
    #####:  929:                    p++;//Next card
        -:  930:                }
        -:  931:            }
        -:  932:        }
        -:  933:
        -:  934:        else {
    #####:  935:            if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  936:                gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
        -:  937:
    #####:  938:                state->supplyCount[estate]--;//Decrement Estates
    #####:  939:                if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:                    isGameOver(state);
call    0 never executed
        -:  941:                }
        -:  942:            }
        -:  943:        }
        -:  944:
        -:  945:
    #####:  946:        return 0;
        -:  947:
        -:  948:    case great_hall:
        -:  949:        //+1 Card
    #####:  950:        drawCard(currentPlayer, state);
call    0 never executed
        -:  951:
        -:  952:        //+1 Actions
    #####:  953:        state->numActions++;
        -:  954:
        -:  955:        //discard card from hand
    #####:  956:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  957:        return 0;
        -:  958:
        -:  959:    case minion:
        -:  960:        //+1 action
        1:  961:        state->numActions++;
        -:  962:
        -:  963:        //discard card from hand
        1:  964:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  965:
        1:  966:		if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  967:        {
        1:  968:            *bonus = *bonus + 2;
        -:  969:        }
    #####:  970:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  971:        {
        -:  972:            //discard hand
    #####:  973:            while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  974:            {
    #####:  975:                discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  976:            }
        -:  977:
        -:  978:            //draw 4
    #####:  979:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  980:            {
    #####:  981:                drawCard(currentPlayer, state);
call    0 never executed
        -:  982:            }
        -:  983:
        -:  984:            //other players discard hand and redraw if hand size > 4
    #####:  985:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  986:            {
    #####:  987:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  988:                {
    #####:  989:                    if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  990:                    {
        -:  991:                        //discard hand
    #####:  992:                        while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  993:                        {
    #####:  994:                            discardCard(handPos, i, state, 0);
call    0 never executed
        -:  995:                        }
        -:  996:
        -:  997:                        //draw 4
    #####:  998:                        for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  999:                        {
    #####: 1000:                            drawCard(i, state);
call    0 never executed
        -: 1001:                        }
        -: 1002:                    }
        -: 1003:                }
        -: 1004:            }
        -: 1005:
        -: 1006:        }
        1: 1007:        return 0;
        -: 1008:
        -: 1009:    case steward:
    #####: 1010:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1011:        {
        -: 1012:            //+2 cards
    #####: 1013:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1014:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1015:        }
    #####: 1016:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1017:        {
        -: 1018:            //+2 coins
    #####: 1019:            *bonus = *bonus + 2;
        -: 1020:        }
        -: 1021:        else
        -: 1022:        {
        -: 1023:            //trash 2 cards in hand
    #####: 1024:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1025:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1026:        }
        -: 1027:
        -: 1028:        //discard card from hand
    #####: 1029:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1030:        return 0;
        -: 1031:
        -: 1032:    case tribute:
        2: 1033:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1034:            if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1035:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:                state->deckCount[nextPlayer]--;
        -: 1037:            }
    #####: 1038:            else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1039:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1040:                state->discardCount[nextPlayer]--;
        -: 1041:            }
        -: 1042:            else {
        -: 1043:                //No Card to Reveal
        -: 1044:                if (DEBUG) {
        -: 1045:                    printf("No cards to reveal\n");
        -: 1046:                }
        -: 1047:            }
        -: 1048:        }
        -: 1049:
        -: 1050:        else {
        2: 1051:            if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1052:                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1053:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1054:                    state->deckCount[nextPlayer]++;
    #####: 1055:                    state->discard[nextPlayer][i] = -1;
    #####: 1056:                    state->discardCount[nextPlayer]--;
        -: 1057:                }
        -: 1058:
    #####: 1059:                shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1060:            }
        2: 1061:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2: 1062:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        2: 1063:            state->deckCount[nextPlayer]--;
        2: 1064:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2: 1065:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        2: 1066:            state->deckCount[nextPlayer]--;
        -: 1067:        }
        2: 1068:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 1069:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        2: 1070:            state->playedCardCount++;
        2: 1071:            tributeRevealedCards[1] = -1;
        -: 1072:        }
        -: 1073:
        6: 1074:        for (i = 0; i < 2; i ++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        4: 1075:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2: 1076:                *bonus += 2;
        -: 1077:            }
        -: 1078:
        2: 1079:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 1080:                drawCard(currentPlayer, state);
call    0 never executed
    #####: 1081:                drawCard(currentPlayer, state);
call    0 never executed
        -: 1082:            }
        2: 1083:            else if(tributeRevealedCards[i] == -1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1084:                
        -: 1085:            }
        -: 1086:            else{ //Action Card
    #####: 1087:                state->numActions = state->numActions + 2;
        -: 1088:            }
        -: 1089:        }
        -: 1090:
        2: 1091:        return 0;
        -: 1092:
        -: 1093:    case ambassador:
        1: 1094:        j = 0;		//used to check if player has enough cards to discard
        -: 1095:
        1: 1096:        if (choice2 > 2 || choice2 < 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1097:        {
    #####: 1098:            return -1;
        -: 1099:        }
        -: 1100:
        1: 1101:        if (choice1 == handPos)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1102:        {
    #####: 1103:            return -1;
        -: 1104:        }
        -: 1105:
        6: 1106:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1107:        {
        5: 1108:            if (i != handPos && state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -: 1109:            {
        2: 1110:                j++;
        -: 1111:            }
        -: 1112:        }
        1: 1113:        if (j < choice2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1114:        {
    #####: 1115:            return -1;
        -: 1116:        }
        -: 1117:
        -: 1118:        if (DEBUG)
        -: 1119:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1120:
        -: 1121:        //increase supply count for choosen card by amount being discarded
        1: 1122:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1123:
        -: 1124:        //each other player gains a copy of revealed card
        3: 1125:        for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1126:        {
        2: 1127:            if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1128:            {
        1: 1129:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 returned 100%
        -: 1130:            }
        -: 1131:        }
        -: 1132:
        -: 1133:        //discard played card from hand
        1: 1134:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1135:
        -: 1136:        //trash copies of cards returned to supply
        3: 1137:        for (j = 0; j < choice2; j++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1138:        {
        3: 1139:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1140:            {
        3: 1141:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1142:                {
        2: 1143:                    discardCard(i, currentPlayer, state, 1);
call    0 returned 100%
        2: 1144:                    break;
        -: 1145:                }
        -: 1146:            }
        -: 1147:        }
        -: 1148:
        1: 1149:        return 0;
        -: 1150:
        -: 1151:    case cutpurse:
        -: 1152:
    #####: 1153:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1154:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:        {
    #####: 1156:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1157:            {
    #####: 1158:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1159:                {
    #####: 1160:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1161:                    {
    #####: 1162:                        discardCard(j, i, state, 0);
call    0 never executed
    #####: 1163:                        break;
        -: 1164:                    }
    #####: 1165:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1166:                    {
    #####: 1167:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1168:                        {
        -: 1169:                            if (DEBUG)
        -: 1170:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1171:                        }
    #####: 1172:                        break;
        -: 1173:                    }
        -: 1174:                }
        -: 1175:
        -: 1176:            }
        -: 1177:
        -: 1178:        }
        -: 1179:
        -: 1180:        //discard played card from hand
    #####: 1181:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1182:
    #####: 1183:        return 0;
        -: 1184:
        -: 1185:
        -: 1186:    case embargo:
        -: 1187:        //+2 Coins
    #####: 1188:        *bonus = *bonus + 2;
        -: 1189:
        -: 1190:        //see if selected pile is in play
    #####: 1191:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1192:        {
    #####: 1193:            return -1;
        -: 1194:        }
        -: 1195:
        -: 1196:        //add embargo token to selected supply pile
    #####: 1197:        state->embargoTokens[choice1]++;
        -: 1198:
        -: 1199:        //trash card
    #####: 1200:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1201:        return 0;
        -: 1202:
        -: 1203:    case outpost:
        -: 1204:        //set outpost flag
    #####: 1205:        state->outpostPlayed++;
        -: 1206:
        -: 1207:        //discard card
    #####: 1208:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1209:        return 0;
        -: 1210:
        -: 1211:    case salvager:
        -: 1212:        //+1 buy
    #####: 1213:        state->numBuys++;
        -: 1214:
    #####: 1215:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1216:        {
        -: 1217:            //gain coins equal to trashed card
    #####: 1218:            *bonus = *bonus + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1219:            //trash card
    #####: 1220:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1221:        }
        -: 1222:
        -: 1223:        //discard card
    #####: 1224:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1225:        return 0;
        -: 1226:
        -: 1227:    case sea_hag:
    #####: 1228:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1229:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1230:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1231:                state->deckCount[i]--;
    #####: 1232:                state->discardCount[i]++;
    #####: 1233:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1234:            }
        -: 1235:        }
    #####: 1236:        return 0;
        -: 1237:
        -: 1238:    case treasure_map:
        -: 1239:        //search hand for another treasure_map
    #####: 1240:        index = -1;
    #####: 1241:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:        {
    #####: 1243:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1244:            {
    #####: 1245:                index = i;
    #####: 1246:                break;
        -: 1247:            }
        -: 1248:        }
    #####: 1249:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1250:        {
        -: 1251:            //trash both treasure cards
    #####: 1252:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1253:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1254:
        -: 1255:            //gain 4 Gold cards
    #####: 1256:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:            {
    #####: 1258:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1259:            }
        -: 1260:
        -: 1261:            //return success
    #####: 1262:            return 1;
        -: 1263:        }
        -: 1264:
        -: 1265:        //no second treasure_map found in hand
    #####: 1266:        return -1;
        -: 1267:    }
        -: 1268:
    #####: 1269:    return -1;
        -: 1270:}
        -: 1271:
function discardCard called 27 returned 100% blocks executed 89%
       27: 1272:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1273:{
        -: 1274:
        -: 1275:    //if card is not trashed, added to Played pile
       27: 1276:    if (trashFlag < 1)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -: 1277:    {   
        -: 1278:        //add card to played pile
       14: 1279:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][handPos];
       14: 1280:        state->discardCount[currentPlayer]++;
        -: 1281:
        -: 1282:        //add card to played pile
       14: 1283:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       14: 1284:        state->playedCardCount++;
        -: 1285:    }
        -: 1286:
        -: 1287:    //set played card to -1
       27: 1288:    state->hand[currentPlayer][handPos] = -1;
        -: 1289:
        -: 1290:    //remove card from player's hand
       27: 1291:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -: 1292:    {
        -: 1293:        //reduce number of cards in hand
       10: 1294:        state->handCount[currentPlayer]--;
        -: 1295:    }
       17: 1296:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1297:    {
        -: 1298:        //reduce number of cards in hand
    #####: 1299:        state->handCount[currentPlayer]--;
        -: 1300:    }
        -: 1301:    else
        -: 1302:    {
        -: 1303:        //replace discarded card with last card in hand
       17: 1304:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1305:        //set last card to -1
       17: 1306:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1307:        //reduce number of cards in hand
       17: 1308:        state->handCount[currentPlayer]--;
        -: 1309:    }
        -: 1310:
       27: 1311:    return 0;
        -: 1312:}
        -: 1313:
function gainCard called 13 returned 100% blocks executed 90%
       13: 1314:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1315:{
        -: 1316:    //Note: supplyPos is enum of choosen card
        -: 1317:
        -: 1318:    //check if supply pile is empty (0) or card is not used in game (-1)
       13: 1319:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
        -: 1320:    {
        1: 1321:        return -1;
        -: 1322:    }
        -: 1323:
        -: 1324:    //added card for [whoseTurn] current player:
        -: 1325:    // toFlag = 0 : add to discard
        -: 1326:    // toFlag = 1 : add to deck
        -: 1327:    // toFlag = 2 : add to hand
        -: 1328:
       12: 1329:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1330:    {
    #####: 1331:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1332:        state->deckCount[player]++;
        -: 1333:    }
       12: 1334:    else if (toFlag == 2)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1335:    {
        8: 1336:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        8: 1337:        state->handCount[player]++;
        -: 1338:    }
        -: 1339:    else
        -: 1340:    {
        4: 1341:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1342:        state->discardCount[player]++;
        -: 1343:    }
        -: 1344:
        -: 1345:    //decrease number in supply pile
       12: 1346:    state->supplyCount[supplyPos]--;
        -: 1347:
       12: 1348:    return 0;
        -: 1349:}
        -: 1350:
function updateCoins called 10 returned 100% blocks executed 82%
       10: 1351:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1352:{
        -: 1353:    int i;
        -: 1354:
        -: 1355:    //reset coin count
       10: 1356:    state->coins = 0;
        -: 1357:
        -: 1358:    //add coins for each Treasure card in player's hand
       60: 1359:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1360:    {
       50: 1361:        if (state->hand[player][i] == copper)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
        -: 1362:        {
       37: 1363:            state->coins += 1;
        -: 1364:        }
       13: 1365:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1366:        {
    #####: 1367:            state->coins += 2;
        -: 1368:        }
       13: 1369:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1370:        {
    #####: 1371:            state->coins += 3;
        -: 1372:        }
        -: 1373:    }
        -: 1374:
        -: 1375:    //add bonus
       10: 1376:    state->coins += bonus;
        -: 1377:
       10: 1378:    return 0;
        -: 1379:}
        -: 1380:
        -: 1381:
        -: 1382://end of dominion.c
        -: 1383:
