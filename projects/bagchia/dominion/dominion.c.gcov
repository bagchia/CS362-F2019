        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:40
        -:    0:Programs:12
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://Modified assignment 3
        -:    9:
function compare called 1440 returned 100% blocks executed 83%
     1440:   10:int compare(const void *a, const void *b)
        -:   11:{
     1440:   12:    if (*(int *)a > *(int *)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   13:        return 1;
     1440:   14:    if (*(int *)a < *(int *)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      384:   15:        return -1;
     1056:   16:    return 0;
        -:   17:}
        -:   18:
function newGame called 0 returned 0% blocks executed 0%
    #####:   19:struct gameState *newGame()
        -:   20:{
    #####:   21:    struct gameState *g = malloc(sizeof(struct gameState));
    #####:   22:    return g;
        -:   23:}
        -:   24:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   25:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   26:                  int k8, int k9, int k10)
        -:   27:{
    #####:   28:    int *k = malloc(10 * sizeof(int));
    #####:   29:    k[0] = k1;
    #####:   30:    k[1] = k2;
    #####:   31:    k[2] = k3;
    #####:   32:    k[3] = k4;
    #####:   33:    k[4] = k5;
    #####:   34:    k[5] = k6;
    #####:   35:    k[6] = k7;
    #####:   36:    k[7] = k8;
    #####:   37:    k[8] = k9;
    #####:   38:    k[9] = k10;
    #####:   39:    return k;
        -:   40:}
        -:   41:
function initializeGame called 40 returned 100% blocks executed 94%
       40:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:                   struct gameState *state)
        -:   44:{
        -:   45:    int i;
        -:   46:    int j;
        -:   47:    int it;
        -:   48:
        -:   49:    //set up random number generator
       40:   50:    SelectStream(1);
call    0 returned 100%
       40:   51:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   52:
        -:   53:    //check number of players
       40:   54:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   55:    {
    #####:   56:        return -1;
        -:   57:    }
        -:   58:
        -:   59:    //set number of players
       40:   60:    state->numPlayers = numPlayers;
        -:   61:
        -:   62:    //check selected kingdom cards are different
      440:   63:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
     4400:   65:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   66:        {
     4000:   67:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   68:            {
    #####:   69:                return -1;
        -:   70:            }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:    //initialize supply
        -:   75:    ///////////////////////////////
        -:   76:
        -:   77:    //set number of Curse cards
       40:   78:    if (numPlayers == 2)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:   79:    {
       24:   80:        state->supplyCount[curse] = 10;
        -:   81:    }
       16:   82:    else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   83:    {
       16:   84:        state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:    else
        -:   87:    {
    #####:   88:        state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:    //set number of Victory cards
       40:   92:    if (numPlayers == 2)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:   93:    {
       24:   94:        state->supplyCount[estate] = 8;
       24:   95:        state->supplyCount[duchy] = 8;
       24:   96:        state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:    else
        -:   99:    {
       16:  100:        state->supplyCount[estate] = 12;
       16:  101:        state->supplyCount[duchy] = 12;
       16:  102:        state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:    //set number of Treasure cards
       40:  106:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       40:  107:    state->supplyCount[silver] = 40;
       40:  108:    state->supplyCount[gold] = 30;
        -:  109:
        -:  110:    //set number of Kingdom cards
      840:  111:    for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  112:    {
     6600:  113:        for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  114:        {
     6200:  115:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  116:            {
        -:  117:                //check if card is a 'Victory' Kingdom card
      400:  118:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  119:                {
      160:  120:                    if (numPlayers == 2)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:  121:                    {
       48:  122:                        state->supplyCount[i] = 8;
        -:  123:                    }
        -:  124:                    else
        -:  125:                    {
       32:  126:                        state->supplyCount[i] = 12;
        -:  127:                    }
        -:  128:                }
        -:  129:                else
        -:  130:                {
      320:  131:                    state->supplyCount[i] = 10;
        -:  132:                }
      400:  133:                break;
        -:  134:            }
        -:  135:            else //card is not in the set choosen for the game
        -:  136:            {
     5800:  137:                state->supplyCount[i] = -1;
        -:  138:            }
        -:  139:        }
        -:  140:    }
        -:  141:
        -:  142:    ////////////////////////
        -:  143:    //supply intilization complete
        -:  144:
        -:  145:    //set player decks
      136:  146:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  147:    {
       96:  148:        state->deckCount[i] = 0;
      384:  149:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  150:        {
      288:  151:            state->deck[i][j] = estate;
      288:  152:            state->deckCount[i]++;
        -:  153:        }
      768:  154:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  155:        {
      672:  156:            state->deck[i][j] = copper;
      672:  157:            state->deckCount[i]++;
        -:  158:        }
        -:  159:    }
        -:  160:
        -:  161:    //shuffle player decks
      136:  162:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  163:    {
       96:  164:        if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  165:        {
    #####:  166:            return -1;
        -:  167:        }
        -:  168:    }
        -:  169:
        -:  170:    //draw player hands
      136:  171:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  172:    {
        -:  173:        //initialize hand size to zero
       96:  174:        state->handCount[i] = 0;
       96:  175:        state->discardCount[i] = 0;
        -:  176:        //draw 5 cards
        -:  177:        // for (j = 0; j < 5; j++)
        -:  178:        //	{
        -:  179:        //	  drawCard(i, state);
        -:  180:        //	}
        -:  181:    }
        -:  182:
        -:  183:    //set embargo tokens to 0 for all supply piles
     1120:  184:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  185:    {
     1080:  186:        state->embargoTokens[i] = 0;
        -:  187:    }
        -:  188:
        -:  189:    //initialize first player's turn
       40:  190:    state->outpostPlayed = 0;
       40:  191:    state->phase = 0;
       40:  192:    state->numActions = 1;
       40:  193:    state->numBuys = 1;
       40:  194:    state->playedCardCount = 0;
       40:  195:    state->whoseTurn = 0;
       40:  196:    state->handCount[state->whoseTurn] = 0;
        -:  197:    //int it; move to top
        -:  198:
        -:  199:    //Moved draw cards to here, only drawing at the start of a turn
      240:  200:    for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  201:    {
      200:  202:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  203:    }
        -:  204:
       40:  205:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  206:
       40:  207:    return 0;
        -:  208:}
        -:  209:
function shuffle called 112 returned 100% blocks executed 100%
      112:  210:int shuffle(int player, struct gameState *state)
        -:  211:{
        -:  212:
        -:  213:    int newDeck[MAX_DECK];
      112:  214:    int newDeckPos = 0;
        -:  215:    int card;
        -:  216:    int i;
        -:  217:
      112:  218:    if (state->deckCount[player] < 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       16:  219:        return -1;
       96:  220:    qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  221:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
     1152:  223:    while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  224:    {
      960:  225:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      960:  226:        newDeck[newDeckPos] = state->deck[player][card];
      960:  227:        newDeckPos++;
     3608:  228:        for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  229:        {
     2648:  230:            state->deck[player][i] = state->deck[player][i + 1];
        -:  231:        }
      960:  232:        state->deckCount[player]--;
        -:  233:    }
     1056:  234:    for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  235:    {
      960:  236:        state->deck[player][i] = newDeck[i];
      960:  237:        state->deckCount[player]++;
        -:  238:    }
        -:  239:
       96:  240:    return 0;
        -:  241:}
        -:  242:
function playCard called 0 returned 0% blocks executed 0%
    #####:  243:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  244:{
        -:  245:    int card;
    #####:  246:    int coin_bonus = 0; //tracks coins gain from actions
        -:  247:
        -:  248:    //check if it is the right phase
    #####:  249:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  250:    {
    #####:  251:        return -1;
        -:  252:    }
        -:  253:
        -:  254:    //check if player has enough actions
    #####:  255:    if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  256:    {
    #####:  257:        return -1;
        -:  258:    }
        -:  259:
        -:  260:    //get card played
    #####:  261:    card = handCard(handPos, state);
call    0 never executed
        -:  262:
        -:  263:    //check if selected card is an action
    #####:  264:    if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  265:    {
    #####:  266:        return -1;
        -:  267:    }
        -:  268:
        -:  269:    //play card
    #####:  270:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  271:    {
    #####:  272:        return -1;
        -:  273:    }
        -:  274:
        -:  275:    //reduce number of actions
    #####:  276:    state->numActions--;
        -:  277:
        -:  278:    //update coins (Treasure cards may be added with card draws)
    #####:  279:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  280:
    #####:  281:    return 0;
        -:  282:}
        -:  283:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  284:int buyCard(int supplyPos, struct gameState *state)
        -:  285:{
        -:  286:    int who;
        -:  287:    if (DEBUG)
        -:  288:    {
        -:  289:        printf("Entering buyCard...\n");
        -:  290:    }
        -:  291:
        -:  292:    // I don't know what to do about the phase thing.
        -:  293:
    #####:  294:    who = state->whoseTurn;
        -:  295:
    #####:  296:    if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  297:    {
        -:  298:        if (DEBUG)
        -:  299:            printf("You do not have any buys left\n");
    #####:  300:        return -1;
        -:  301:    }
    #####:  302:    else if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  303:    {
        -:  304:        if (DEBUG)
        -:  305:            printf("There are not any of that type of card left\n");
    #####:  306:        return -1;
        -:  307:    }
    #####:  308:    else if (state->coins < getCost(supplyPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  309:    {
        -:  310:        if (DEBUG)
        -:  311:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  312:        return -1;
        -:  313:    }
        -:  314:    else
        -:  315:    {
    #####:  316:        state->phase = 1;
        -:  317:        //state->supplyCount[supplyPos]--;
    #####:  318:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  319:
    #####:  320:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  321:        state->numBuys--;
        -:  322:        if (DEBUG)
        -:  323:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  324:    }
        -:  325:
        -:  326:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  327:    //state->discardCount[who]++;
        -:  328:
    #####:  329:    return 0;
        -:  330:}
        -:  331:
function numHandCards called 40 returned 100% blocks executed 100%
       40:  332:int numHandCards(struct gameState *state)
        -:  333:{
       40:  334:    return state->handCount[whoseTurn(state)];
call    0 returned 100%
        -:  335:}
        -:  336:
function handCard called 0 returned 0% blocks executed 0%
    #####:  337:int handCard(int handPos, struct gameState *state)
        -:  338:{
    #####:  339:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  340:    return state->hand[currentPlayer][handPos];
        -:  341:}
        -:  342:
function supplyCount called 114 returned 100% blocks executed 100%
      114:  343:int supplyCount(int card, struct gameState *state)
        -:  344:{
      114:  345:    return state->supplyCount[card];
        -:  346:}
        -:  347:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  348:int fullDeckCount(int player, int card, struct gameState *state)
        -:  349:{
        -:  350:    int i;
    #####:  351:    int count = 0;
        -:  352:
    #####:  353:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  354:    {
    #####:  355:        if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  356:            count++;
        -:  357:    }
        -:  358:
    #####:  359:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  360:    {
    #####:  361:        if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  362:            count++;
        -:  363:    }
        -:  364:
    #####:  365:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  366:    {
    #####:  367:        if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  368:            count++;
        -:  369:    }
        -:  370:
    #####:  371:    return count;
        -:  372:}
        -:  373:
function whoseTurn called 169 returned 100% blocks executed 100%
      169:  374:int whoseTurn(struct gameState *state)
        -:  375:{
      169:  376:    return state->whoseTurn;
        -:  377:}
        -:  378:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  379:int endTurn(struct gameState *state)
        -:  380:{
        -:  381:    int k;
        -:  382:    int i;
    #####:  383:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  384:
        -:  385:    //Discard hand
    #####:  386:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  387:    {
    #####:  388:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  389:        state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  390:    }
    #####:  391:    state->handCount[currentPlayer] = 0; //Reset hand count
        -:  392:
        -:  393:    //Code for determining the player
    #####:  394:    if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  395:    {
    #####:  396:        state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  397:    }
        -:  398:    else
        -:  399:    {
    #####:  400:        state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  401:    }
        -:  402:
    #####:  403:    state->outpostPlayed = 0;
    #####:  404:    state->phase = 0;
    #####:  405:    state->numActions = 1;
    #####:  406:    state->coins = 0;
    #####:  407:    state->numBuys = 1;
    #####:  408:    state->playedCardCount = 0;
    #####:  409:    state->handCount[state->whoseTurn] = 0;
        -:  410:
        -:  411:    //int k; move to top
        -:  412:    //Next player draws hand
    #####:  413:    for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  414:    {
    #####:  415:        drawCard(state->whoseTurn, state); //Draw a card
call    0 never executed
        -:  416:    }
        -:  417:
        -:  418:    //Update money
    #####:  419:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  420:
    #####:  421:    return 0;
        -:  422:}
        -:  423:
function isGameOver called 32 returned 100% blocks executed 82%
       32:  424:int isGameOver(struct gameState *state)
        -:  425:{
        -:  426:    int i;
        -:  427:    int j;
        -:  428:
        -:  429:    //if stack of Province cards is empty, the game ends
       32:  430:    if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  431:    {
    #####:  432:        return 1;
        -:  433:    }
        -:  434:
        -:  435:    //if three supply pile are at 0, the game ends
       32:  436:    j = 0;
      832:  437:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  438:    {
      800:  439:        if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  440:        {
       32:  441:            j++;
        -:  442:        }
        -:  443:    }
       32:  444:    if (j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  445:    {
    #####:  446:        return 1;
        -:  447:    }
        -:  448:
       32:  449:    return 0;
        -:  450:}
        -:  451:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  452:int scoreFor(int player, struct gameState *state)
        -:  453:{
        -:  454:
        -:  455:    int i;
    #####:  456:    int score = 0;
        -:  457:    //score from hand
    #####:  458:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:        if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  461:        {
    #####:  462:            score = score - 1;
        -:  463:        };
    #####:  464:        if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  465:        {
    #####:  466:            score = score + 1;
        -:  467:        };
    #####:  468:        if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  469:        {
    #####:  470:            score = score + 3;
        -:  471:        };
    #####:  472:        if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  473:        {
    #####:  474:            score = score + 6;
        -:  475:        };
    #####:  476:        if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  477:        {
    #####:  478:            score = score + 1;
        -:  479:        };
    #####:  480:        if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  481:        {
    #####:  482:            score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  483:        };
        -:  484:    }
        -:  485:
        -:  486:    //score from discard
    #####:  487:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:        if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  490:        {
    #####:  491:            score = score - 1;
        -:  492:        };
    #####:  493:        if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  494:        {
    #####:  495:            score = score + 1;
        -:  496:        };
    #####:  497:        if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  498:        {
    #####:  499:            score = score + 3;
        -:  500:        };
    #####:  501:        if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  502:        {
    #####:  503:            score = score + 6;
        -:  504:        };
    #####:  505:        if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            score = score + 1;
        -:  508:        };
    #####:  509:        if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  510:        {
    #####:  511:            score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  512:        };
        -:  513:    }
        -:  514:
        -:  515:    //score from deck
    #####:  516:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:        if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  519:        {
    #####:  520:            score = score - 1;
        -:  521:        };
    #####:  522:        if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  523:        {
    #####:  524:            score = score + 1;
        -:  525:        };
    #####:  526:        if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  527:        {
    #####:  528:            score = score + 3;
        -:  529:        };
    #####:  530:        if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  531:        {
    #####:  532:            score = score + 6;
        -:  533:        };
    #####:  534:        if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  535:        {
    #####:  536:            score = score + 1;
        -:  537:        };
    #####:  538:        if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  539:        {
    #####:  540:            score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  541:        };
        -:  542:    }
        -:  543:
    #####:  544:    return score;
        -:  545:}
        -:  546:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  547:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  548:{
        -:  549:    int i;
        -:  550:    int j;
        -:  551:    int highScore;
        -:  552:    int currentPlayer;
        -:  553:
        -:  554:    //get score for each player
    #####:  555:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  556:    {
        -:  557:        //set unused player scores to -9999
    #####:  558:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  559:        {
    #####:  560:            players[i] = -9999;
        -:  561:        }
        -:  562:        else
        -:  563:        {
    #####:  564:            players[i] = scoreFor(i, state);
call    0 never executed
        -:  565:        }
        -:  566:    }
        -:  567:
        -:  568:    //find highest score
    #####:  569:    j = 0;
    #####:  570:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  573:        {
    #####:  574:            j = i;
        -:  575:        }
        -:  576:    }
    #####:  577:    highScore = players[j];
        -:  578:
        -:  579:    //add 1 to players who had less turns
    #####:  580:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  581:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  582:    {
    #####:  583:        if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  584:        {
    #####:  585:            players[i]++;
        -:  586:        }
        -:  587:    }
        -:  588:
        -:  589:    //find new highest score
    #####:  590:    j = 0;
    #####:  591:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  594:        {
    #####:  595:            j = i;
        -:  596:        }
        -:  597:    }
    #####:  598:    highScore = players[j];
        -:  599:
        -:  600:    //set winners in array to 1 and rest to 0
    #####:  601:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:        if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  604:        {
    #####:  605:            players[i] = 1;
        -:  606:        }
        -:  607:        else
        -:  608:        {
    #####:  609:            players[i] = 0;
        -:  610:        }
        -:  611:    }
        -:  612:
    #####:  613:    return 0;
        -:  614:}
        -:  615:
function drawCard called 296 returned 100% blocks executed 85%
      296:  616:int drawCard(int player, struct gameState *state)
        -:  617:{
        -:  618:    int count;
        -:  619:    int deckCounter;
      296:  620:    if (state->deckCount[player] <= 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  621:    { //Deck is empty
        -:  622:
        -:  623:        //Step 1 Shuffle the discard pile back into a deck
        -:  624:        int i;
        -:  625:        //Move discard to deck
       16:  626:        for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  627:        {
    #####:  628:            state->deck[player][i] = state->discard[player][i];
    #####:  629:            state->discard[player][i] = -1;
        -:  630:        }
        -:  631:
       16:  632:        state->deckCount[player] = state->discardCount[player];
       16:  633:        state->discardCount[player] = 0; //Reset discard
        -:  634:
        -:  635:        //Shufffle the deck
       16:  636:        shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  637:
        -:  638:        if (DEBUG)
        -:  639:        { //Debug statements
        -:  640:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  641:        }
        -:  642:
       16:  643:        state->discardCount[player] = 0;
        -:  644:
        -:  645:        //Step 2 Draw Card
       16:  646:        count = state->handCount[player]; //Get current player's hand count
        -:  647:
        -:  648:        if (DEBUG)
        -:  649:        { //Debug statements
        -:  650:            printf("Current hand count: %d\n", count);
        -:  651:        }
        -:  652:
       16:  653:        deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  654:
       16:  655:        if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16:  656:            return -1;
        -:  657:
    #####:  658:        state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  659:        state->deckCount[player]--;
    #####:  660:        state->handCount[player]++; //Increment hand count
        -:  661:    }
        -:  662:
        -:  663:    else
        -:  664:    {
      280:  665:        int count = state->handCount[player]; //Get current hand count for player
        -:  666:        int deckCounter;
        -:  667:        if (DEBUG)
        -:  668:        { //Debug statements
        -:  669:            printf("Current hand count: %d\n", count);
        -:  670:        }
        -:  671:
      280:  672:        deckCounter = state->deckCount[player];                            //Create holder for the deck count
      280:  673:        state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
      280:  674:        state->deckCount[player]--;
      280:  675:        state->handCount[player]++; //Increment hand count
        -:  676:    }
        -:  677:
      280:  678:    return 0;
        -:  679:}
        -:  680:
function getCost called 34 returned 100% blocks executed 17%
       34:  681:int getCost(int cardNumber)
        -:  682:{
       34:  683:    switch (cardNumber)
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 71%
branch  5 taken 24%
branch  6 taken 6%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  684:    {
        -:  685:    case curse:
    #####:  686:        return 0;
        -:  687:    case estate:
    #####:  688:        return 2;
        -:  689:    case duchy:
    #####:  690:        return 5;
        -:  691:    case province:
    #####:  692:        return 8;
        -:  693:    case copper:
       24:  694:        return 0;
        -:  695:    case silver:
        8:  696:        return 3;
        -:  697:    case gold:
        2:  698:        return 6;
        -:  699:    case adventurer:
    #####:  700:        return 6;
        -:  701:    case council_room:
    #####:  702:        return 5;
        -:  703:    case feast:
    #####:  704:        return 4;
        -:  705:    case gardens:
    #####:  706:        return 4;
        -:  707:    case mine:
    #####:  708:        return 5;
        -:  709:    case remodel:
    #####:  710:        return 4;
        -:  711:    case smithy:
    #####:  712:        return 4;
        -:  713:    case village:
    #####:  714:        return 3;
        -:  715:    case baron:
    #####:  716:        return 4;
        -:  717:    case great_hall:
    #####:  718:        return 3;
        -:  719:    case minion:
    #####:  720:        return 5;
        -:  721:    case steward:
    #####:  722:        return 3;
        -:  723:    case tribute:
    #####:  724:        return 5;
        -:  725:    case ambassador:
    #####:  726:        return 3;
        -:  727:    case cutpurse:
    #####:  728:        return 4;
        -:  729:    case embargo:
    #####:  730:        return 2;
        -:  731:    case outpost:
    #####:  732:        return 5;
        -:  733:    case salvager:
    #####:  734:        return 4;
        -:  735:    case sea_hag:
    #####:  736:        return 4;
        -:  737:    case treasure_map:
    #####:  738:        return 4;
        -:  739:    }
        -:  740:
    #####:  741:    return -1;
        -:  742:}
        -:  743:
function baronEffect called 32 returned 100% blocks executed 100%
       32:  744:int baronEffect(int choice1, struct gameState *state)
        -:  745:{
       32:  746:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
       32:  747:    state->numBuys++; //Increase buys by 1!
       32:  748:    if (choice1 > 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  749:    {                               //Boolean true or going to discard an estate
       16:  750:        int hand_iterator = 0;      //Iterator for hand!
       16:  751:        int card_not_discarded = 1; //Flag for discard set!
       96:  752:        while (card_not_discarded)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  753:        {
       64:  754:            if (state->hand[currentPlayer][hand_iterator] == estate)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -:  755:            {                      //Found an estate card!
        8:  756:                state->coins += 4; //Add 4 coins to the amount of coins
        8:  757:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][hand_iterator];
        8:  758:                state->discardCount[currentPlayer]++;
       40:  759:                for (; hand_iterator < state->handCount[currentPlayer]; hand_iterator++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  760:                {
       32:  761:                    state->hand[currentPlayer][hand_iterator] = state->hand[currentPlayer][hand_iterator + 1];
        -:  762:                }
        8:  763:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        8:  764:                state->handCount[currentPlayer]--;
        8:  765:                card_not_discarded = 0; //Exit the loop
        -:  766:            }
       56:  767:            else if (hand_iterator > state->handCount[currentPlayer])
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  768:            {
        -:  769:                if (DEBUG)
        -:  770:                {
        -:  771:                    printf("No estate cards in your hand, invalid choice\n");
        -:  772:                    printf("Must gain an estate if there are any\n");
        -:  773:                }
        8:  774:                if (supplyCount(estate, state) > 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  775:                {
        8:  776:                    gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
        -:  777:
        8:  778:                    state->supplyCount[estate]--; //Decrement estates
        -:  779:                    //BUG
        -:  780:                    // if (supplyCount(estate, state) == 0)
        -:  781:                    // {
        -:  782:                    //     isGameOver(state);
        -:  783:                    // }
        -:  784:                }
        8:  785:                card_not_discarded = 0; //Exit the loop
        -:  786:            }
        -:  787:
        -:  788:            else
        -:  789:            {
       48:  790:                hand_iterator++; //Next card
        -:  791:            }
        -:  792:        }
        -:  793:    }
        -:  794:
        -:  795:    else
        -:  796:    {
       16:  797:        if (supplyCount(estate, state) > 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  798:        {
       16:  799:            gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 returned 100%
        -:  800:            //BUG
        -:  801:            // state->supplyCount[estate]--; //Decrement Estates
       16:  802:            if (supplyCount(estate, state) == 0)
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  803:            {
        8:  804:                isGameOver(state);
call    0 returned 100%
        -:  805:            }
        -:  806:        }
        -:  807:    }
       32:  808:    return 0;
        -:  809:}
        -:  810:
function minionEffect called 16 returned 100% blocks executed 100%
       16:  811:int minionEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -:  812:{
       16:  813:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  814:    int i, j;
        -:  815:    //+1 action
       16:  816:    state->numActions++;
        -:  817:
        -:  818:    //discard card from hand
       16:  819:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  820:
       16:  821:    if (choice1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  822:    {
        -:  823:        //BUG
        8:  824:        state->coins = state->coins + 3; //Should be 2
        -:  825:    }
        8:  826:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  827:    {
        -:  828:        //discard hand
       48:  829:        while (numHandCards(state) > 0)
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
        -:  830:        {
       32:  831:            discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  832:        }
        -:  833:
        -:  834:        //draw 4
       40:  835:        for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  836:        {
       32:  837:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  838:        }
        -:  839:
        -:  840:        //other players discard hand and redraw if hand size > 4
       32:  841:        for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  842:        {
        -:  843:            //BUG
        -:  844:            // if (i != currentPlayer)
        -:  845:            // {
       24:  846:                if (state->handCount[i] > 4)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  847:                {
        -:  848:                    //discard hand
       64:  849:                    while (state->handCount[i] > 0)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  850:                    {
       48:  851:                        discardCard(handPos, i, state, 0);
call    0 returned 100%
        -:  852:                    }
        -:  853:
        -:  854:                    //draw 4
       40:  855:                    for (j = 0; j < 4; j++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  856:                    {
       32:  857:                        drawCard(i, state);
call    0 returned 100%
        -:  858:                    }
        -:  859:                }
        -:  860:            // }
        -:  861:        }
        -:  862:    }
       16:  863:    return 0;
        -:  864:}
        -:  865:
function ambassadorEffect called 16 returned 100% blocks executed 90%
       16:  866:int ambassadorEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -:  867:{
       16:  868:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  869:    int i, j;
        -:  870:    //BUG changed to j=100 to prevent crashes
       16:  871:    j = 100; //used to check if player has enough cards to discard
        -:  872:
       16:  873:    if (choice2 > 2 || choice2 < 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  874:    {
        8:  875:        return -1;
        -:  876:    }
        -:  877:
        -:  878:    //BUG
        -:  879:    // if (choice1 == handPos)
        -:  880:    // {
        -:  881:    //     return -1;
        -:  882:    // }
        -:  883:
       56:  884:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  885:    {
       48:  886:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        -:  887:        {
    #####:  888:            j++;
        -:  889:        }
        -:  890:    }
        8:  891:    if (j < choice2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  892:    {
    #####:  893:        return -1;
        -:  894:    }
        -:  895:
        -:  896:    if (DEBUG)
        -:  897:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  898:
        -:  899:    //increase supply count for choosen card by amount being discarded
        8:  900:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  901:
        -:  902:    //each other player gains a copy of revealed card
       32:  903:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  904:    {
       24:  905:        if (i != currentPlayer)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  906:        {
       16:  907:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 returned 100%
        -:  908:        }
        -:  909:    }
        -:  910:
        -:  911:    //discard played card from hand
        8:  912:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  913:
        -:  914:    //trash copies of cards returned to supply
       24:  915:    for (j = 0; j < choice2; j++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  916:    {
       40:  917:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  918:        {
       40:  919:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  920:            {
       16:  921:                discardCard(i, currentPlayer, state, 1);
call    0 returned 100%
       16:  922:                break;
        -:  923:            }
        -:  924:        }
        -:  925:    }
        -:  926:
        8:  927:    return 0;
        -:  928:}
        -:  929:
function tributeEffect called 48 returned 100% blocks executed 88%
       48:  930:int tributeEffect(struct gameState *state)
        -:  931:{
       48:  932:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
       48:  933:    int nextPlayer = currentPlayer+1;
        -:  934:    //BUG uncommented because crash
       48:  935:    if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  936:    {
        8:  937:        nextPlayer = 0;
        -:  938:    }
        -:  939:    int i;
       48:  940:    int tributeRevealedCards[2] = {-1, -1};
       48:  941:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  942:    {
       24:  943:        if (state->deckCount[nextPlayer] > 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  944:        {
        8:  945:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
        8:  946:            state->deckCount[nextPlayer]--;
        -:  947:        }
       16:  948:        else if (state->discardCount[nextPlayer] > 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  949:        {
        8:  950:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
        8:  951:            state->discardCount[nextPlayer]--;
        -:  952:        }
        -:  953:        else
        -:  954:        {
        -:  955:            //No Card to Reveal
        -:  956:            if (DEBUG)
        -:  957:            {
        -:  958:                printf("No cards to reveal\n");
        -:  959:            }
        -:  960:        }
        -:  961:    }
        -:  962:
        -:  963:    else
        -:  964:    {
       24:  965:        if (state->deckCount[nextPlayer] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  966:        {
    #####:  967:            for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  968:            {
    #####:  969:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####:  970:                state->deckCount[nextPlayer]++;
    #####:  971:                state->discard[nextPlayer][i] = -1;
    #####:  972:                state->discardCount[nextPlayer]--;
        -:  973:            }
        -:  974:
    #####:  975:            shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -:  976:        }
       24:  977:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
       24:  978:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       24:  979:        state->deckCount[nextPlayer]--;
       24:  980:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
       24:  981:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       24:  982:        state->deckCount[nextPlayer]--;
        -:  983:    }
        -:  984:
       48:  985:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  986:    { //If we have a duplicate card, just drop one
       16:  987:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       16:  988:        state->playedCardCount++;
        -:  989:        //BUG
        -:  990:        //tributeRevealedCards[1] = -1;
        -:  991:    }
        -:  992:
      192:  993:    for (i = 0; i <= 2; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  994:    {
      144:  995:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  996:        { //Treasure cards
       24:  997:            state->coins += 2;
        -:  998:        }
        -:  999:
      120: 1000:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 87% (fallthrough)
branch  5 taken 13%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        -: 1001:        { //Victory Card Found
       16: 1002:            drawCard(currentPlayer, state);
call    0 returned 100%
       16: 1003:            drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1004:        }
        -: 1005:        else
        -: 1006:        { //Action Card
      104: 1007:            state->numActions = state->numActions + 2;
        -: 1008:        }
        -: 1009:    }
        -: 1010:
       48: 1011:    return 0;
        -: 1012:}
        -: 1013:
function mineEffect called 17 returned 100% blocks executed 90%
       17: 1014:int mineEffect(int choice1, int choice2, struct gameState *state, int handPos){
       17: 1015:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1016:    int i, j;
       17: 1017:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1018:
       17: 1019:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1020:        {
    #####: 1021:            return -1;
        -: 1022:        }
        -: 1023:
       17: 1024:        if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1025:        {
    #####: 1026:            return -1;
        -: 1027:        }
        -: 1028:
        -: 1029:        //BUG
       17: 1030:        if ((getCost(state->hand[currentPlayer][choice1]) + 3) >= getCost(choice2))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 88% (fallthrough)
branch  3 taken 12%
        -: 1031:        {
       15: 1032:            return -1;
        -: 1033:        }
        -: 1034:
        -: 1035:        //BUG
        2: 1036:        gainCard(choice1, state, 2, currentPlayer);
call    0 returned 100%
        -: 1037:
        -: 1038:        //discard card from hand
        2: 1039:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1040:
        -: 1041:        //discard trashed card
        4: 1042:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1043:        {
        4: 1044:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1045:            {
        2: 1046:                discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
        2: 1047:                break;
        -: 1048:            }
        -: 1049:        }
        -: 1050:
        2: 1051:        return 0;
        -: 1052:}
        -: 1053:
function cardEffect called 0 returned 0% blocks executed 0%
    #####: 1054:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1055:{
        -: 1056:    int i;
        -: 1057:    int j;
        -: 1058:    int k;
        -: 1059:    int x;
        -: 1060:    int index;
    #####: 1061:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1062:    int nextPlayer = currentPlayer + 1;
        -: 1063:    int temphand[MAX_HAND]; // moved above the if statement
    #####: 1064:    int drawntreasure = 0;
        -: 1065:    int cardDrawn;
    #####: 1066:    int z = 0; // this is the counter for the temp hand
    #####: 1067:    if (nextPlayer > (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -: 1068:    {
    #####: 1069:        nextPlayer = 0;
        -: 1070:    }
        -: 1071:
        -: 1072:    //uses switch to select card and perform actions
    #####: 1073:    switch (card)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -: 1074:    {
        -: 1075:    case adventurer:
    #####: 1076:        while (drawntreasure < 2)
branch  0 never executed
branch  1 never executed
        -: 1077:        {
    #####: 1078:            if (state->deckCount[currentPlayer] < 1)
branch  0 never executed
branch  1 never executed
        -: 1079:            { //if the deck is empty we need to shuffle discard and add to deck
    #####: 1080:                shuffle(currentPlayer, state);
call    0 never executed
        -: 1081:            }
    #####: 1082:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1083:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####: 1084:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1085:                drawntreasure++;
        -: 1086:            else
        -: 1087:            {
    #####: 1088:                temphand[z] = cardDrawn;
    #####: 1089:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1090:                z++;
        -: 1091:            }
        -: 1092:        }
    #####: 1093:        while (z - 1 >= 0)
branch  0 never executed
branch  1 never executed
        -: 1094:        {
    #####: 1095:            state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1096:            z = z - 1;
        -: 1097:        }
    #####: 1098:        return 0;
        -: 1099:
        -: 1100:    case council_room:
        -: 1101:        //+4 Cards
    #####: 1102:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1103:        {
    #####: 1104:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1105:        }
        -: 1106:
        -: 1107:        //+1 Buy
    #####: 1108:        state->numBuys++;
        -: 1109:
        -: 1110:        //Each other player draws a card
    #####: 1111:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:        {
    #####: 1113:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1114:            {
    #####: 1115:                drawCard(i, state);
call    0 never executed
        -: 1116:            }
        -: 1117:        }
        -: 1118:
        -: 1119:        //put played card in played card pile
    #####: 1120:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1121:
    #####: 1122:        return 0;
        -: 1123:
        -: 1124:    case feast:
        -: 1125:        //gain card with cost up to 5
        -: 1126:        //Backup hand
    #####: 1127:        for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1128:        {
    #####: 1129:            temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####: 1130:            state->hand[currentPlayer][i] = -1;          //Set to nothing
        -: 1131:        }
        -: 1132:        //Backup hand
        -: 1133:
        -: 1134:        //Update Coins for Buy
    #####: 1135:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1136:        x = 1; //Condition to loop on
    #####: 1137:        while (x == 1)
branch  0 never executed
branch  1 never executed
        -: 1138:        { //Buy one card
    #####: 1139:            if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1140:            {
        -: 1141:                if (DEBUG)
        -: 1142:                    printf("None of that card left, sorry!\n");
        -: 1143:
        -: 1144:                if (DEBUG)
        -: 1145:                {
        -: 1146:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1147:                }
        -: 1148:            }
    #####: 1149:            else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1150:            {
    #####: 1151:                printf("That card is too expensive!\n");
call    0 never executed
        -: 1152:
        -: 1153:                if (DEBUG)
        -: 1154:                {
        -: 1155:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1156:                }
        -: 1157:            }
        -: 1158:            else
        -: 1159:            {
        -: 1160:
        -: 1161:                if (DEBUG)
        -: 1162:                {
        -: 1163:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1164:                }
        -: 1165:
    #####: 1166:                gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####: 1167:                x = 0;                                      //No more buying cards
        -: 1168:
        -: 1169:                if (DEBUG)
        -: 1170:                {
        -: 1171:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1172:                }
        -: 1173:            }
        -: 1174:        }
        -: 1175:
        -: 1176:        //Reset Hand
    #####: 1177:        for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1178:        {
    #####: 1179:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1180:            temphand[i] = -1;
        -: 1181:        }
        -: 1182:        //Reset Hand
        -: 1183:
    #####: 1184:        return 0;
        -: 1185:
        -: 1186:    case gardens:
    #####: 1187:        return -1;
        -: 1188:
        -: 1189:    case mine:
    #####: 1190:        return mineEffect(choice1, choice2, state, handPos);
call    0 never executed
        -: 1191:
        -: 1192:    case remodel:
    #####: 1193:        j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1194:
    #####: 1195:        if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1196:        {
    #####: 1197:            return -1;
        -: 1198:        }
        -: 1199:
    #####: 1200:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1201:
        -: 1202:        //discard card from hand
    #####: 1203:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1204:
        -: 1205:        //discard trashed card
    #####: 1206:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1207:        {
    #####: 1208:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1209:            {
    #####: 1210:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1211:                break;
        -: 1212:            }
        -: 1213:        }
        -: 1214:
    #####: 1215:        return 0;
        -: 1216:
        -: 1217:    case smithy:
        -: 1218:        //+3 Cards
    #####: 1219:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1220:        {
    #####: 1221:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1222:        }
        -: 1223:
        -: 1224:        //discard card from hand
    #####: 1225:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1226:        return 0;
        -: 1227:
        -: 1228:    case village:
        -: 1229:        //+1 Card
    #####: 1230:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1231:
        -: 1232:        //+2 Actions
    #####: 1233:        state->numActions = state->numActions + 2;
        -: 1234:
        -: 1235:        //discard played card from hand
    #####: 1236:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1237:        return 0;
        -: 1238:
        -: 1239:    case baron:
    #####: 1240:        return baronEffect(choice1, state);
call    0 never executed
        -: 1241:
        -: 1242:    case great_hall:
        -: 1243:        //+1 Card
    #####: 1244:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1245:
        -: 1246:        //+1 Actions
    #####: 1247:        state->numActions++;
        -: 1248:
        -: 1249:        //discard card from hand
    #####: 1250:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1251:        return 0;
        -: 1252:
        -: 1253:    case minion:
    #####: 1254:        return minionEffect(choice1, choice2, state, handPos);
call    0 never executed
        -: 1255:    case steward:
    #####: 1256:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1257:        {
        -: 1258:            //+2 cards
    #####: 1259:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1260:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1261:        }
    #####: 1262:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1263:        {
        -: 1264:            //+2 coins
    #####: 1265:            state->coins = state->coins + 2;
        -: 1266:        }
        -: 1267:        else
        -: 1268:        {
        -: 1269:            //trash 2 cards in hand
    #####: 1270:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1271:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1272:        }
        -: 1273:
        -: 1274:        //discard card from hand
    #####: 1275:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1276:        return 0;
        -: 1277:
        -: 1278:    case tribute:
    #####: 1279:        return tributeEffect(state);
call    0 never executed
        -: 1280:
        -: 1281:    case ambassador:
    #####: 1282:        return ambassadorEffect(choice1, choice2, state, handPos);
call    0 never executed
        -: 1283:
        -: 1284:    case cutpurse:
        -: 1285:
    #####: 1286:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1287:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1288:        {
    #####: 1289:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1290:            {
    #####: 1291:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1292:                {
    #####: 1293:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1294:                    {
    #####: 1295:                        discardCard(j, i, state, 0);
call    0 never executed
    #####: 1296:                        break;
        -: 1297:                    }
    #####: 1298:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1299:                    {
    #####: 1300:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1301:                        {
        -: 1302:                            if (DEBUG)
        -: 1303:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1304:                        }
    #####: 1305:                        break;
        -: 1306:                    }
        -: 1307:                }
        -: 1308:            }
        -: 1309:        }
        -: 1310:
        -: 1311:        //discard played card from hand
    #####: 1312:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1313:
    #####: 1314:        return 0;
        -: 1315:
        -: 1316:    case embargo:
        -: 1317:        //+2 Coins
    #####: 1318:        state->coins = state->coins + 2;
        -: 1319:
        -: 1320:        //see if selected pile is in play
    #####: 1321:        if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1322:        {
    #####: 1323:            return -1;
        -: 1324:        }
        -: 1325:
        -: 1326:        //add embargo token to selected supply pile
    #####: 1327:        state->embargoTokens[choice1]++;
        -: 1328:
        -: 1329:        //trash card
    #####: 1330:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1331:        return 0;
        -: 1332:
        -: 1333:    case outpost:
        -: 1334:        //set outpost flag
    #####: 1335:        state->outpostPlayed++;
        -: 1336:
        -: 1337:        //discard card
    #####: 1338:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1339:        return 0;
        -: 1340:
        -: 1341:    case salvager:
        -: 1342:        //+1 buy
    #####: 1343:        state->numBuys++;
        -: 1344:
    #####: 1345:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1346:        {
        -: 1347:            //gain coins equal to trashed card
    #####: 1348:            state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1349:            //trash card
    #####: 1350:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1351:        }
        -: 1352:
        -: 1353:        //discard card
    #####: 1354:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1355:        return 0;
        -: 1356:
        -: 1357:    case sea_hag:
    #####: 1358:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1359:        {
    #####: 1360:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1361:            {
    #####: 1362:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1363:                state->deckCount[i]--;
    #####: 1364:                state->discardCount[i]++;
    #####: 1365:                state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1366:            }
        -: 1367:        }
    #####: 1368:        return 0;
        -: 1369:
        -: 1370:    case treasure_map:
        -: 1371:        //search hand for another treasure_map
    #####: 1372:        index = -1;
    #####: 1373:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1374:        {
    #####: 1375:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1376:            {
    #####: 1377:                index = i;
    #####: 1378:                break;
        -: 1379:            }
        -: 1380:        }
    #####: 1381:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1382:        {
        -: 1383:            //trash both treasure cards
    #####: 1384:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1385:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1386:
        -: 1387:            //gain 4 Gold cards
    #####: 1388:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1389:            {
    #####: 1390:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1391:            }
        -: 1392:
        -: 1393:            //return success
    #####: 1394:            return 1;
        -: 1395:        }
        -: 1396:
        -: 1397:        //no second treasure_map found in hand
    #####: 1398:        return -1;
        -: 1399:    }
        -: 1400:
    #####: 1401:    return -1;
        -: 1402:}
        -: 1403:
function discardCard called 124 returned 100% blocks executed 89%
      124: 1404:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1405:{
        -: 1406:
        -: 1407:    //if card is not trashed, added to Played pile
      124: 1408:    if (trashFlag < 1)
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
        -: 1409:    {
        -: 1410:        //add card to played pile
      108: 1411:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      108: 1412:        state->playedCardCount++;
        -: 1413:    }
        -: 1414:
        -: 1415:    //set played card to -1
      124: 1416:    state->hand[currentPlayer][handPos] = -1;
        -: 1417:
        -: 1418:    //remove card from player's hand
      124: 1419:    if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -: 1420:    {
        -: 1421:        //reduce number of cards in hand
       16: 1422:        state->handCount[currentPlayer]--;
        -: 1423:    }
      108: 1424:    else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1425:    {
        -: 1426:        //reduce number of cards in hand
    #####: 1427:        state->handCount[currentPlayer]--;
        -: 1428:    }
        -: 1429:    else
        -: 1430:    {
        -: 1431:        //replace discarded card with last card in hand
      108: 1432:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1433:        //set last card to -1
      108: 1434:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1435:        //reduce number of cards in hand
      108: 1436:        state->handCount[currentPlayer]--;
        -: 1437:    }
        -: 1438:
      124: 1439:    return 0;
        -: 1440:}
        -: 1441:
function gainCard called 42 returned 100% blocks executed 80%
       42: 1442:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1443:{
        -: 1444:    //Note: supplyPos is enum of choosen card
        -: 1445:
        -: 1446:    //check if supply pile is empty (0) or card is not used in game (-1)
       42: 1447:    if (supplyCount(supplyPos, state) < 1)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1448:    {
    #####: 1449:        return -1;
        -: 1450:    }
        -: 1451:
        -: 1452:    //added card for [whoseTurn] current player:
        -: 1453:    // toFlag = 0 : add to discard
        -: 1454:    // toFlag = 1 : add to deck
        -: 1455:    // toFlag = 2 : add to hand
        -: 1456:
       42: 1457:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1458:    {
    #####: 1459:        state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1460:        state->deckCount[player]++;
        -: 1461:    }
       42: 1462:    else if (toFlag == 2)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1463:    {
        2: 1464:        state->hand[player][state->handCount[player]] = supplyPos;
        2: 1465:        state->handCount[player]++;
        -: 1466:    }
        -: 1467:    else
        -: 1468:    {
       40: 1469:        state->discard[player][state->discardCount[player]] = supplyPos;
       40: 1470:        state->discardCount[player]++;
        -: 1471:    }
        -: 1472:
        -: 1473:    //decrease number in supply pile
       42: 1474:    state->supplyCount[supplyPos]--;
        -: 1475:
       42: 1476:    return 0;
        -: 1477:}
        -: 1478:
function updateCoins called 40 returned 100% blocks executed 82%
       40: 1479:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1480:{
        -: 1481:    int i;
        -: 1482:
        -: 1483:    //reset coin count
       40: 1484:    state->coins = 0;
        -: 1485:
        -: 1486:    //add coins for each Treasure card in player's hand
      240: 1487:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1488:    {
      200: 1489:        if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1490:        {
      160: 1491:            state->coins += 1;
        -: 1492:        }
       40: 1493:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1494:        {
    #####: 1495:            state->coins += 2;
        -: 1496:        }
       40: 1497:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1498:        {
    #####: 1499:            state->coins += 3;
        -: 1500:        }
        -: 1501:    }
        -: 1502:
        -: 1503:    //add bonus
       40: 1504:    state->coins += bonus;
        -: 1505:
       40: 1506:    return 0;
        -: 1507:}
        -: 1508:
        -: 1509://end of dominion.c
