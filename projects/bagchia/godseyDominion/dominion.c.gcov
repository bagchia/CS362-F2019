        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 300 returned 100% blocks executed 83%
      300:    8:int compare(const void* a, const void* b) {
      300:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:        return 1;
      300:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       80:   12:        return -1;
      220:   13:    return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 94%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
        8:   44:    SelectStream(1);
call    0 returned 100%
        8:   45:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:    //check number of players
        8:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        8:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       88:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        8:   73:    if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   74:    {
        4:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
        4:   77:    else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        4:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        8:   87:    if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   88:    {
        4:   89:        state->supplyCount[estate] = 8;
        4:   90:        state->supplyCount[duchy] = 8;
        4:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
        4:   95:        state->supplyCount[estate] = 12;
        4:   96:        state->supplyCount[duchy] = 12;
        4:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        8:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:    state->supplyCount[silver] = 40;
        8:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      168:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1320:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:        {
     1240:  110:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       80:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:                {
       32:  115:                    if (numPlayers == 2) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        8:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
        -:  118:                    else {
        8:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
        -:  121:                }
        -:  122:                else
        -:  123:                {
       64:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
       80:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
     1160:  130:                state->supplyCount[i] = -1;
        -:  131:            }
        -:  132:        }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
       28:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  141:    {
       20:  142:        state->deckCount[i] = 0;
       80:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:        {
       60:  145:            state->deck[i][j] = estate;
       60:  146:            state->deckCount[i]++;
        -:  147:        }
      160:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:        {
      140:  150:            state->deck[i][j] = copper;
      140:  151:            state->deckCount[i]++;
        -:  152:        }
        -:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
       28:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  157:    {
       20:  158:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
        -:  162:    }
        -:  163:
        -:  164:    //draw player hands
       28:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  166:    {
        -:  167:        //initialize hand size to zero
       20:  168:        state->handCount[i] = 0;
       20:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
        -:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
      224:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
      216:  180:        state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
        8:  184:    state->outpostPlayed = 0;
        8:  185:    state->phase = 0;
        8:  186:    state->numActions = 1;
        8:  187:    state->numBuys = 1;
        8:  188:    state->playedCardCount = 0;
        8:  189:    state->whoseTurn = 0;
        8:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
       48:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  195:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:    }
        -:  197:
        8:  198:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
        8:  200:    return 0;
        -:  201:}
        -:  202:
function shuffle called 3877 returned 100% blocks executed 100%
     3877:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
     3877:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
     3877:  211:    if (state->deckCount[player] < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     3857:  212:        return -1;
       20:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      240:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      200:  217:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      200:  218:        newDeck[newDeckPos] = state->deck[player][card];
      200:  219:        newDeckPos++;
      740:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
      540:  221:            state->deck[player][i] = state->deck[player][i+1];
        -:  222:        }
      200:  223:        state->deckCount[player]--;
        -:  224:    }
      220:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      200:  226:        state->deck[player][i] = newDeck[i];
      200:  227:        state->deckCount[player]++;
        -:  228:    }
        -:  229:
       20:  230:    return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
call    0 never executed
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:
    #####:  271:    return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
        -:  311:}
        -:  312:
function numHandCards called 2268 returned 100% blocks executed 100%
     2268:  313:int numHandCards(struct gameState *state) {
     2268:  314:    return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 2367 returned 100% blocks executed 100%
     2367:  322:int supplyCount(int card, struct gameState *state) {
     2367:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 3268 returned 100% blocks executed 100%
     3268:  348:int whoseTurn(struct gameState *state) {
     3268:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 864 returned 100% blocks executed 82%
      864:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
      864:  397:    if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
      864:  403:    j = 0;
    22464:  404:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  405:    {
    21600:  406:        if (state->supplyCount[i] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  407:        {
      528:  408:            j++;
        -:  409:        }
        -:  410:    }
      864:  411:    if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
      864:  416:    return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
        -:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
        -:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
        -:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
        -:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
        -:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  443:        };
        -:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
        -:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
        -:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
        -:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
        -:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
        -:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  466:        };
        -:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
        -:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
        -:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
        -:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
        -:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
        -:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  489:        };
        -:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
        -:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  512:        }
        -:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
        -:  522:        }
        -:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
        -:  533:        }
        -:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
        -:  543:        }
        -:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
        -:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
        -:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 3934 returned 100% blocks executed 85%
     3934:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
     3934:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
     3857:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
        -:  574:        }
        -:  575:
     3857:  576:        state->deckCount[player] = state->discardCount[player];
     3857:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
     3857:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
     3857:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
     3857:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
     3857:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
     3857:  597:        if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     3857:  598:            return -1;
        -:  599:
    #####:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  601:        state->deckCount[player]--;
    #####:  602:        state->handCount[player]++;//Increment hand count
        -:  603:    }
        -:  604:
        -:  605:    else {
       77:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
       77:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
       77:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       77:  614:        state->deckCount[player]--;
       77:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
       77:  618:    return 0;
        -:  619:}
        -:  620:
function getCost called 4 returned 100% blocks executed 13%
        4:  621:int getCost(int cardNumber)
        -:  622:{
        4:  623:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 75%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
        -:  625:    case curse:
    #####:  626:        return 0;
        -:  627:    case estate:
    #####:  628:        return 2;
        -:  629:    case duchy:
    #####:  630:        return 5;
        -:  631:    case province:
    #####:  632:        return 8;
        -:  633:    case copper:
        3:  634:        return 0;
        -:  635:    case silver:
    #####:  636:        return 3;
        -:  637:    case gold:
        1:  638:        return 6;
        -:  639:    case adventurer:
    #####:  640:        return 6;
        -:  641:    case council_room:
    #####:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
    #####:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
    #####:  656:        return 4;
        -:  657:    case great_hall:
    #####:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
    #####:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
        -:  682:}
        -:  683:
        -:  684:
function playBaron called 1004 returned 100% blocks executed 100%
     1004:  685:int playBaron(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer)
        -:  686:{
     1004:  687:    state->numBuys+=2;//Increase buys by 1!
     1004:  688:    if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
      476:  689:        int p = 0;//Iterator for hand!
      476:  690:        int card_not_discarded = 1;//Flag for discard set!
     3749:  691:        while(card_not_discarded) {
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
     2797:  692:            if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
      330:  693:                state->coins += 4;//Add 4 coins to the amount of coins
      330:  694:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
      330:  695:                state->discardCount[currentPlayer]++;
     1695:  696:                for (; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
     1365:  697:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  698:                }
      330:  699:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
      330:  700:                state->handCount[currentPlayer]--;
      330:  701:                card_not_discarded = 0;//Exit the loop
        -:  702:            }
     2467:  703:            else if (p > state->handCount[currentPlayer]) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  704:                if(DEBUG) {
        -:  705:                    printf("No estate cards in your hand, invalid choice\n");
        -:  706:                    printf("Must gain an estate if there are any\n");
        -:  707:                }
      146:  708:                if (supplyCount(estate, state) > 0) {
call    0 returned 100%
branch  1 taken 73% (fallthrough)
branch  2 taken 27%
      107:  709:                    gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
        -:  710:
        -:  711:                    //state->supplyCount[estate]--;//Decrement estates
      107:  712:                    if (supplyCount(estate, state) == 0) {
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
       38:  713:                        isGameOver(state);
call    0 returned 100%
        -:  714:                    }
        -:  715:                }
      146:  716:                card_not_discarded = 0;//Exit the loop
        -:  717:            }
        -:  718:
        -:  719:            else {
     2321:  720:                p++;//Next card
        -:  721:            }
        -:  722:        }
        -:  723:    }
        -:  724:
        -:  725:    else {
      528:  726:        if (supplyCount(estate, state) > 0) {
call    0 returned 100%
branch  1 taken 74% (fallthrough)
branch  2 taken 26%
      393:  727:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        -:  728:
      393:  729:            state->supplyCount[estate]--;//Decrement Estates
      393:  730:            if (supplyCount(estate, state) == 0) {
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
      135:  731:                isGameOver(state);
call    0 returned 100%
        -:  732:            }
        -:  733:        }
        -:  734:    }
        -:  735:
     1004:  736:    return 0;
        -:  737:}
        -:  738:
function playMinion called 1002 returned 100% blocks executed 100%
     1002:  739:int playMinion(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer)
        -:  740:{
        -:  741:    int i, j;
        -:  742:    //+1 action
     1002:  743:    state->numActions++;
        -:  744:
        -:  745:    //discard card from hand
     1002:  746:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  747:
     1002:  748:    if (choice1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  749:    {
      504:  750:        state->coins = state->coins + 2;
        -:  751:    }
     1002:  752:    /*else*/if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  753:    {
        -:  754:        //discard hand
     2766:  755:        while(numHandCards(state) > 0)
call    0 returned 100%
branch  1 taken 78%
branch  2 taken 22% (fallthrough)
        -:  756:        {
     1770:  757:            discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  758:        }
        -:  759:
        -:  760:        //draw 4
     2490:  761:        for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  762:        {
     1992:  763:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  764:        }
        -:  765:
        -:  766:        //other players discard hand and redraw if hand size > 4
     1494:  767:        for (i = 1; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  768:        {
      996:  769:            if (i != currentPlayer)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  770:            {
      996:  771:                if ( state->handCount[i] > 4 )
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -:  772:                {
        -:  773:                    //discard hand
     3804:  774:                    while( state->handCount[i] > 0 )
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  775:                    {
     2856:  776:                        discardCard(handPos, i, state, 0);
call    0 returned 100%
        -:  777:                    }
        -:  778:
        -:  779:                    //draw 4
     2370:  780:                    for (j = 0; j < 4; j++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  781:                    {
     1896:  782:                        drawCard(i, state);
call    0 returned 100%
        -:  783:                    }
        -:  784:                }
        -:  785:            }
        -:  786:        }
        -:  787:
        -:  788:    }
     1002:  789:    return 0;
        -:  790:}
        -:  791:
function playAmbassador called 3 returned 100% blocks executed 42%
        3:  792:int playAmbassador(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer)
        -:  793:{
        -:  794:    int  i,j;
        3:  795:    j = 0;		//used to check if player has enough cards to discard
        -:  796:
        3:  797:    if (choice2 > 2 || choice2 < 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  798:    {
        1:  799:        return 0;
        -:  800:    }
        -:  801:
        2:  802:    if (choice1 == handPos)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  803:    {
        1:  804:        return -1;
        -:  805:    }
        -:  806:
        7:  807:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  808:    {
        6:  809:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        -:  810:        {
    #####:  811:            j++;
        -:  812:        }
        -:  813:    }
        1:  814:    if (j < choice2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  815:    {
        1:  816:        return -1;
        -:  817:    }
        -:  818:
        -:  819:    if (DEBUG)
        -:  820:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  821:
        -:  822:    //increase supply count for choosen card by amount being discarded
    #####:  823:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  824:
        -:  825:    //each other player gains a copy of revealed card
    #####:  826:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  827:    {
    #####:  828:        if (i == currentPlayer) // used to be i != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  829:        {
    #####:  830:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  831:        }
        -:  832:    }
        -:  833:
        -:  834:    //discard played card from hand
    #####:  835:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  836:
        -:  837:    //trash copies of cards returned to supply
    #####:  838:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  839:    {
    #####:  840:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  841:        {
    #####:  842:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  843:            {
    #####:  844:                discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  845:                break;
        -:  846:            }
        -:  847:        }
        -:  848:    }
        -:  849:
    #####:  850:    return 0;
        -:  851:}
        -:  852:
function playTribute called 1007 returned 100% blocks executed 83%
     1007:  853:int playTribute(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer, int nextPlayer)
        -:  854:{
     1007:  855:    int tributeRevealedCards[2] = {-1, -1};
        -:  856:    int i;
     1007:  857:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     1001:  858:        if (state->deckCount[nextPlayer] > 0) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  859:            //tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1:  860:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        1:  861:            state->deckCount[nextPlayer]--;
        -:  862:        }
     1000:  863:        else if (state->discardCount[nextPlayer] > 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  864:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -:  865:            //tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  866:            state->discardCount[nextPlayer]--;
        -:  867:        }
        -:  868:        else {
        -:  869:            //No Card to Reveal
        -:  870:            if (DEBUG) {
        -:  871:                printf("No cards to reveal\n");
        -:  872:            }
        -:  873:        }
        -:  874:    }
        -:  875:
        -:  876:    else {
        6:  877:        if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  878:            for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  879:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  880:                state->deckCount[nextPlayer]++;
    #####:  881:                state->discard[nextPlayer][i] = -1;
    #####:  882:                state->discardCount[nextPlayer]--;
        -:  883:            }
        -:  884:
    #####:  885:            shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  886:        }
        6:  887:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        6:  888:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        6:  889:        state->deckCount[nextPlayer]--;
        6:  890:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        6:  891:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        6:  892:        state->deckCount[nextPlayer]--;
        -:  893:    }
        -:  894:
     1007:  895:    if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     1003:  896:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
     1003:  897:        state->playedCardCount++;
     1003:  898:        tributeRevealedCards[1] = -1;
        -:  899:    }
        -:  900:
     4028:  901:    for (i = 0; i <= 2; i ++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     3021:  902:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:  903:            state->coins += 2;
        -:  904:        }
        -:  905:
     3017:  906:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        3:  907:            drawCard(currentPlayer, state);
call    0 returned 100%
        3:  908:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  909:        }
        -:  910:        else { //Action Card
     3014:  911:            state->numActions = state->numActions + 2;
        -:  912:        }
        -:  913:    }
        -:  914:
     1007:  915:    return 0;
        -:  916:}
        -:  917:
function playMine called 2 returned 100% blocks executed 90%
        2:  918:int playMine(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer)
        -:  919:{
        -:  920:    int i,j;
        2:  921:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  922:
        2:  923:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > silver)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  924:    {
    #####:  925:        return -1;
        -:  926:    }
        -:  927:
        2:  928:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  929:    {
    #####:  930:        return -1;
        -:  931:    }
        -:  932:
        2:  933:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -:  934:    {
        1:  935:        return -1;
        -:  936:    }
        -:  937:
        1:  938:    gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  939:
        -:  940:    //discard card from hand
        1:  941:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  942:
        -:  943:    //discard trashed card
        2:  944:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  945:    {
        2:  946:        if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  947:        {
        1:  948:            discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
        1:  949:            break;
        -:  950:        }
        -:  951:    }
        -:  952:
        1:  953:    return 0;
        -:  954:}
        -:  955:
        -:  956:
function cardEffect called 1000 returned 100% blocks executed 4%
     1000:  957:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  958:{
        -:  959:    int i;
        -:  960:    int j;
        -:  961:    int k;
        -:  962:    int x;
        -:  963:    int index;
     1000:  964:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1000:  965:    int nextPlayer = currentPlayer + 1;
        -:  966:
        -:  967:    int temphand[MAX_HAND];// moved above the if statement
     1000:  968:    int drawntreasure=0;
        -:  969:    int cardDrawn;
     1000:  970:    int z = 0;// this is the counter for the temp hand
     1000:  971:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  972:        nextPlayer = 0;
        -:  973:    }
        -:  974:
        -:  975:
        -:  976:    //uses switch to select card and perform actions
     1000:  977:    switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 100%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  978:    {
        -:  979:    case adventurer:
    #####:  980:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  981:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  982:                shuffle(currentPlayer, state);
call    0 never executed
        -:  983:            }
    #####:  984:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  985:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  986:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  987:                drawntreasure++;
        -:  988:            else {
    #####:  989:                temphand[z]=cardDrawn;
    #####:  990:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  991:                z++;
        -:  992:            }
        -:  993:        }
    #####:  994:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  995:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  996:            z=z-1;
        -:  997:        }
    #####:  998:        return 0;
        -:  999:
        -: 1000:    case council_room:
        -: 1001:        //+4 Cards
    #####: 1002:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1003:        {
    #####: 1004:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1005:        }
        -: 1006:
        -: 1007:        //+1 Buy
    #####: 1008:        state->numBuys++;
        -: 1009:
        -: 1010:        //Each other player draws a card
    #####: 1011:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:        {
    #####: 1013:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1014:            {
    #####: 1015:                drawCard(i, state);
call    0 never executed
        -: 1016:            }
        -: 1017:        }
        -: 1018:
        -: 1019:        //put played card in played card pile
    #####: 1020:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1021:
    #####: 1022:        return 0;
        -: 1023:
        -: 1024:    case feast:
        -: 1025:        //gain card with cost up to 5
        -: 1026:        //Backup hand
    #####: 1027:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1028:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1029:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1030:        }
        -: 1031:        //Backup hand
        -: 1032:
        -: 1033:        //Update Coins for Buy
    #####: 1034:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1035:        x = 1;//Condition to loop on
    #####: 1036:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1037:            if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1038:                if (DEBUG)
        -: 1039:                    printf("None of that card left, sorry!\n");
        -: 1040:
        -: 1041:                if (DEBUG) {
        -: 1042:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1043:                }
        -: 1044:            }
    #####: 1045:            else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1046:                printf("That card is too expensive!\n");
call    0 never executed
        -: 1047:
        -: 1048:                if (DEBUG) {
        -: 1049:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1050:                }
        -: 1051:            }
        -: 1052:            else {
        -: 1053:
        -: 1054:                if (DEBUG) {
        -: 1055:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1056:                }
        -: 1057:
    #####: 1058:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1059:                x = 0;//No more buying cards
        -: 1060:
        -: 1061:                if (DEBUG) {
        -: 1062:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1063:                }
        -: 1064:
        -: 1065:            }
        -: 1066:        }
        -: 1067:
        -: 1068:        //Reset Hand
    #####: 1069:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1070:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1071:            temphand[i] = -1;
        -: 1072:        }
        -: 1073:        //Reset Hand
        -: 1074:
    #####: 1075:        return 0;
        -: 1076:
        -: 1077:    case gardens:
    #####: 1078:        return -1;
        -: 1079:
        -: 1080:    case mine:
    #####: 1081:        return playMine(choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
call    0 never executed
        -: 1082:
        -: 1083:    case remodel:
    #####: 1084:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1085:
    #####: 1086:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1087:        {
    #####: 1088:            return -1;
        -: 1089:        }
        -: 1090:
    #####: 1091:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1092:
        -: 1093:        //discard card from hand
    #####: 1094:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1095:
        -: 1096:        //discard trashed card
    #####: 1097:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1098:        {
    #####: 1099:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1100:            {
    #####: 1101:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1102:                break;
        -: 1103:            }
        -: 1104:        }
        -: 1105:
        -: 1106:
    #####: 1107:        return 0;
        -: 1108:
        -: 1109:    case smithy:
        -: 1110:        //+3 Cards
    #####: 1111:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:        {
    #####: 1113:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1114:        }
        -: 1115:
        -: 1116:        //discard card from hand
    #####: 1117:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:        return 0;
        -: 1119:
        -: 1120:    case village:
        -: 1121:        //+1 Card
    #####: 1122:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1123:
        -: 1124:        //+2 Actions
    #####: 1125:        state->numActions = state->numActions + 2;
        -: 1126:
        -: 1127:        //discard played card from hand
    #####: 1128:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:        return 0;
        -: 1130:
        -: 1131:    case baron:
    #####: 1132:        return playBaron(choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
call    0 never executed
        -: 1133:
        -: 1134:    case great_hall:
        -: 1135:        //+1 Card
    #####: 1136:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1137:
        -: 1138:        //+1 Actions
    #####: 1139:        state->numActions++;
        -: 1140:
        -: 1141:        //discard card from hand
    #####: 1142:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1143:        return 0;
        -: 1144:
        -: 1145:    case minion:
    #####: 1146:        return playMinion(choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
call    0 never executed
        -: 1147:
        -: 1148:    case steward:
    #####: 1149:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1150:        {
        -: 1151:            //+2 cards
    #####: 1152:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1153:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1154:        }
    #####: 1155:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1156:        {
        -: 1157:            //+2 coins
    #####: 1158:            state->coins = state->coins + 2;
        -: 1159:        }
        -: 1160:        else
        -: 1161:        {
        -: 1162:            //trash 2 cards in hand
    #####: 1163:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1164:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1165:        }
        -: 1166:
        -: 1167:        //discard card from hand
    #####: 1168:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1169:        return 0;
        -: 1170:
        -: 1171:    case tribute:
     1000: 1172:        return playTribute(choice1, choice2, choice3, state, handPos, bonus, currentPlayer, nextPlayer);
call    0 returned 100%
        -: 1173:
        -: 1174:    case ambassador:
    #####: 1175:        return playAmbassador(choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
call    0 never executed
        -: 1176:
        -: 1177:    case cutpurse:
        -: 1178:
    #####: 1179:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1180:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:        {
    #####: 1182:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1183:            {
    #####: 1184:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1185:                {
    #####: 1186:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1187:                    {
    #####: 1188:                        discardCard(j, i, state, 0);
call    0 never executed
    #####: 1189:                        break;
        -: 1190:                    }
    #####: 1191:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1192:                    {
    #####: 1193:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1194:                        {
        -: 1195:                            if (DEBUG)
        -: 1196:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1197:                        }
    #####: 1198:                        break;
        -: 1199:                    }
        -: 1200:                }
        -: 1201:
        -: 1202:            }
        -: 1203:
        -: 1204:        }
        -: 1205:
        -: 1206:        //discard played card from hand
    #####: 1207:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1208:
    #####: 1209:        return 0;
        -: 1210:
        -: 1211:
        -: 1212:    case embargo:
        -: 1213:        //+2 Coins
    #####: 1214:        state->coins = state->coins + 2;
        -: 1215:
        -: 1216:        //see if selected pile is in play
    #####: 1217:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1218:        {
    #####: 1219:            return -1;
        -: 1220:        }
        -: 1221:
        -: 1222:        //add embargo token to selected supply pile
    #####: 1223:        state->embargoTokens[choice1]++;
        -: 1224:
        -: 1225:        //trash card
    #####: 1226:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1227:        return 0;
        -: 1228:
        -: 1229:    case outpost:
        -: 1230:        //set outpost flag
    #####: 1231:        state->outpostPlayed++;
        -: 1232:
        -: 1233:        //discard card
    #####: 1234:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1235:        return 0;
        -: 1236:
        -: 1237:    case salvager:
        -: 1238:        //+1 buy
    #####: 1239:        state->numBuys++;
        -: 1240:
    #####: 1241:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1242:        {
        -: 1243:            //gain coins equal to trashed card
    #####: 1244:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1245:            //trash card
    #####: 1246:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1247:        }
        -: 1248:
        -: 1249:        //discard card
    #####: 1250:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1251:        return 0;
        -: 1252:
        -: 1253:    case sea_hag:
    #####: 1254:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1255:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1256:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1257:                state->deckCount[i]--;
    #####: 1258:                state->discardCount[i]++;
    #####: 1259:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1260:            }
        -: 1261:        }
    #####: 1262:        return 0;
        -: 1263:
        -: 1264:    case treasure_map:
        -: 1265:        //search hand for another treasure_map
    #####: 1266:        index = -1;
    #####: 1267:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1268:        {
    #####: 1269:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1270:            {
    #####: 1271:                index = i;
    #####: 1272:                break;
        -: 1273:            }
        -: 1274:        }
    #####: 1275:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1276:        {
        -: 1277:            //trash both treasure cards
    #####: 1278:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1279:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1280:
        -: 1281:            //gain 4 Gold cards
    #####: 1282:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1283:            {
    #####: 1284:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1285:            }
        -: 1286:
        -: 1287:            //return success
    #####: 1288:            return 1;
        -: 1289:        }
        -: 1290:
        -: 1291:        //no second treasure_map found in hand
    #####: 1292:        return -1;
        -: 1293:    }
        -: 1294:
    #####: 1295:    return -1;
        -: 1296:}
        -: 1297:
function discardCard called 5630 returned 100% blocks executed 89%
     5630: 1298:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1299:{
        -: 1300:
        -: 1301:    //if card is not trashed, added to Played pile
     5630: 1302:    if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1303:    {
        -: 1304:        //add card to played pile
     5630: 1305:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     5630: 1306:        state->playedCardCount++;
        -: 1307:    }
        -: 1308:
        -: 1309:    //set played card to -1
     5630: 1310:    state->hand[currentPlayer][handPos] = -1;
        -: 1311:
        -: 1312:    //remove card from player's hand
     5630: 1313:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1314:    {
        -: 1315:        //reduce number of cards in hand
      972: 1316:        state->handCount[currentPlayer]--;
        -: 1317:    }
     4658: 1318:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1319:    {
        -: 1320:        //reduce number of cards in hand
    #####: 1321:        state->handCount[currentPlayer]--;
        -: 1322:    }
        -: 1323:    else
        -: 1324:    {
        -: 1325:        //replace discarded card with last card in hand
     4658: 1326:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1327:        //set last card to -1
     4658: 1328:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1329:        //reduce number of cards in hand
     4658: 1330:        state->handCount[currentPlayer]--;
        -: 1331:    }
        -: 1332:
     5630: 1333:    return 0;
        -: 1334:}
        -: 1335:
function gainCard called 501 returned 100% blocks executed 80%
      501: 1336:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1337:{
        -: 1338:    //Note: supplyPos is enum of choosen card
        -: 1339:
        -: 1340:    //check if supply pile is empty (0) or card is not used in game (-1)
      501: 1341:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1342:    {
    #####: 1343:        return -1;
        -: 1344:    }
        -: 1345:
        -: 1346:    //added card for [whoseTurn] current player:
        -: 1347:    // toFlag = 0 : add to discard
        -: 1348:    // toFlag = 1 : add to deck
        -: 1349:    // toFlag = 2 : add to hand
        -: 1350:
      501: 1351:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1352:    {
    #####: 1353:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1354:        state->deckCount[player]++;
        -: 1355:    }
      501: 1356:    else if (toFlag == 2)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1357:    {
        1: 1358:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1359:        state->handCount[player]++;
        -: 1360:    }
        -: 1361:    else
        -: 1362:    {
      500: 1363:        state->discard[player][ state->discardCount[player] ] = supplyPos;
      500: 1364:        state->discardCount[player]++;
        -: 1365:    }
        -: 1366:
        -: 1367:    //decrease number in supply pile
      501: 1368:    state->supplyCount[supplyPos]--;
        -: 1369:
      501: 1370:    return 0;
        -: 1371:}
        -: 1372:
function updateCoins called 8 returned 100% blocks executed 82%
        8: 1373:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1374:{
        -: 1375:    int i;
        -: 1376:
        -: 1377:    //reset coin count
        8: 1378:    state->coins = 0;
        -: 1379:
        -: 1380:    //add coins for each Treasure card in player's hand
       48: 1381:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1382:    {
       40: 1383:        if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1384:        {
       32: 1385:            state->coins += 1;
        -: 1386:        }
        8: 1387:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1388:        {
    #####: 1389:            state->coins += 2;
        -: 1390:        }
        8: 1391:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1392:        {
    #####: 1393:            state->coins += 3;
        -: 1394:        }
        -: 1395:    }
        -: 1396:
        -: 1397:    //add bonus
        8: 1398:    state->coins += bonus;
        -: 1399:
        8: 1400:    return 0;
        -: 1401:}
        -: 1402:
        -: 1403:
        -: 1404://end of dominion.c
        -: 1405:
